{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Super Library","text":""},{"location":"#setup","title":"Setup","text":"<ul> <li>See the setup document.</li> <li>See the quick start document</li> </ul>"},{"location":"#why-we-built-the-super-library","title":"Why We Built the Super Library","text":"<p>Our goal was to create the best and most scalable apps.</p> <p>FlutterFlow is an excellent tool. It allows you to build apps easily with visual development with the backend database of Firestore and Supabase by default.</p> <p>However there some hurdles on buidling mid-sized social apps. You will notice that you need to rebuild your app at the moment that your app becomes busy with the full of activities from thousands of users.</p> <p>If you are building a chat app using Firestore, here are some of the steps involved when a user sends a chat message:</p> <ol> <li>Create a document for the chat message</li> <li>Read multiple related documents to create the chat message in Security rules.</li> <li>Create a push message doc.</li> <li>Read 1 to thosands documents for getting push notification tokens (It depends).</li> <li>Update the chat room document to mark the read flag for the logged-in user.</li> <li>Read multiple related documents for security rules to mark the read flag.</li> <li>Read the chat message document to display it in the chat room.</li> <li>Read multiple related documents for security rules to display the chat message.</li> <li>Read multiple related documents to support displaying the chat message, like user information.</li> </ol> <p>There are more read/write operations involved in sending and receiving a chat message. If you want your app to display the number of unread messages per chat room, there will be even more document reads and writes. Each access to Firestore results in additional document reads and writes, which can become costly and slow.</p> <p>The Super Library is built on the Realtime Database, which not only reduces costs but also provides ultimate speed and performance. Reads and writes are free in the Realtime Database.</p> <p>We chose Realtime Database because it is simpler, easier, faster, cheaper, and ideal for mid-size apps.</p> <p>While the Realtime Database may not be the best choice for all scenarios, it is highly recommended for busy chat apps.</p>"},{"location":"#how-can-i-use-it-in-my-flutterflow-project","title":"How can I use it in my FlutterFlow project?","text":"<p>Simply add it as a dependency. And read the best practice document.</p>"},{"location":"#is-it-for-flutterflow-only","title":"Is it for FlutterFlow only?","text":"<p>No. The Super Library can be used with any Flutter project. While it is built specifically for FlutterFlow, you can use it however you like. The library is available as a package on pub.dev. We recommend forking it and adding it as a dependency in your Flutter project.</p>"},{"location":"#issues-with-firestore","title":"Issues with Firestore","text":"<ul> <li>Document Reads: Reading one document often requires reading additional related documents, like user information.</li> <li>Data Usage: Firestore requires downloading entire documents, increasing data usage and battery drain for end-users.</li> </ul>"},{"location":"#advantages-of-realtime-database","title":"Advantages of Realtime Database","text":"<ul> <li>Efficiency: Faster, simpler, and cheaper than Firestore.</li> <li>Selective Data: Allows downloading only specific fields.</li> <li>Ideal Use: Suitable for large chat apps or social community apps with high read/write operations.</li> </ul>"},{"location":"#current-limitations","title":"Current Limitations","text":"<ul> <li>Marketplace: Super library may not be published in the Marketplace as it uses Firebase, which is against FlutterFlow's principles.</li> </ul>"},{"location":"#want-to-use-the-super-library","title":"Want to Use the Super Library?","text":"<p>Until the Super Library is published to the marketplace, you can:</p> <ul> <li>Copy the Super Library: Get a copy and create your own version. It's an open source.</li> <li>Add as a Dependency: Directly add the Super Library as a dependency to your project. You may ask me to add your account in the super library project for read preveileges.</li> </ul> <p>If you need help, email me at: thruthesky@gmail.com</p>"},{"location":"#cost-of-firestore","title":"Cost of Firestore","text":"<p>We chose the Realtime Database over Firestore mainly due to cost. While Firestore is popular and preferred by many developers, it is more expensive than the Realtime Database.</p>"},{"location":"#example-scenario","title":"Example Scenario","text":"<p>Imagine you have a chat app with 10,000 active users per day. Each user opens 10 chat rooms, and each chat room downloads 100 messages on average. Users may scroll up to load more messages.</p> <ul> <li>Reads Calculation: <ul> <li>10,000 users * 10 chat rooms * 100 messages = 10,000,000 reads</li> <li>Cost: 10,000,000 reads = USD 3.1</li> </ul> </li> </ul>"},{"location":"#additional-reads","title":"Additional Reads","text":"<p>There are extra document reads, such as reading user documents or documents in security rules to support chat functionality. Let's multiply the cost by 3.</p> <ul> <li>Adjusted Cost: <ul> <li>USD 3.1 * 3 = USD 9.3 per day</li> </ul> </li> </ul>"},{"location":"#more-cases","title":"More Cases","text":"<p>Your app will likely read more documents, such as:</p> <ul> <li>Sending push notifications. For instance, there are 1,000 user in a grou chat. And a user many have more than one push-tokens. On every chat, you need to read more than 1,000 documents to send push notifications. You have to pay more as your app grows.</li> <li>Listing chat rooms in a \"my-chat-room-list\" screen</li> <li>Displaying the number of unread messages per chat room</li> <li>Showing the total number of unread messages across all chat rooms</li> </ul> <p>Let's multiply the cost by 2 (maybe by 3).</p> <ul> <li>Final Cost: <ul> <li>USD 9.3 * 2 = USD 18.6 per day</li> </ul> </li> </ul>"},{"location":"#conclusion","title":"Conclusion","text":"<p>Your app will read even more documents in various scenarios, and you also have to pay for writing documents if your app is using Firestore.</p> <p>With the Realtime Database, reading documents is free. Yes, there is no cost at all. Writing is also free.</p>"},{"location":"#simplicity","title":"Simplicity","text":"<p>The Super Library includes the most common building blocks your app needs. Check out the features it provides. We've made it as simple as possible and will keep updating it to make it even simpler.</p>"},{"location":"#todos","title":"TODOs","text":"<ul> <li>Refere To do document.</li> </ul>"},{"location":"best_practice/","title":"Best practices","text":""},{"location":"best_practice/#how-to-install","title":"How to install","text":"<ul> <li>Refer the quick start document to install super library.</li> </ul>"},{"location":"best_practice/#to-display-user-avatar","title":"To display user avatar","text":"<p>Use <code>UserAvatarComponent</code></p>"},{"location":"best_practice/#to-display-user-display-name","title":"To display user display name","text":"<p>Use <code>UserDisplayNameComponent</code></p>"},{"location":"best_practice/#how-to-display-users","title":"How to display users","text":""},{"location":"best_practice/#how-to-display-buttons","title":"How to display buttons","text":""},{"location":"best_practice/#chat-button","title":"Chat button","text":""},{"location":"best_practice/#block-button","title":"Block button","text":""},{"location":"best_practice/#how-to-display-chat-room-list","title":"How to display chat room list","text":""},{"location":"best_practice/#how-to-display-chat-room","title":"How to display chat room","text":""},{"location":"best_practice/#customizing-chat-message-ui","title":"Customizing chat message UI","text":"<ul> <li>It's not easy because there is a complicated logic in chat message UI.</li> <li>Hiding message if the user is blocked by login user</li> <li>Site preview of the url</li> <li>Click of the url</li> <li></li> </ul>"},{"location":"best_practice/#how-to-display-blocked-users","title":"How to display blocked users","text":""},{"location":"best_practice/#how-to-unblock-a-user","title":"How to unblock a user","text":""},{"location":"best_practice/#displaying-user-avatar","title":"Displaying User Avatar","text":"<ul> <li>Use <code>UserAvatar</code> widget that displays not only user avartar but also displays</li> <li>Anonymous icon if the user has no profile photo</li> <li>Blocked user icon if the user is blocked by the login user</li> </ul>"},{"location":"best_practice/#displaying-user-display-name","title":"Displaying User Display name","text":"<ul> <li>Use <code>DisplayName</code> widget that displays not only the user's display name but also displays</li> <li>the default text if the user has no display name</li> <li><code>blocked</code> message if the user is blocked.</li> </ul>"},{"location":"best_practice/#data","title":"Data","text":"<p>Data is good for - forum based community apps - social apps for displaying the activities of followers as a post wall. - shopping mall apps - and other mid-sized apps</p>"},{"location":"blocking/","title":"Blocking","text":"<p>Super library provides some custom actions to block other users. You can design your own UI for blocking and listing. But you must follow the data structure of the Super library to make everything work together.</p> <p>The blocked information is saved at <code>/users/&lt;uid&gt;/{ blockedUsers: [ ] }</code> in Firestore. And the blocked user list is mirrored to rtdb to work with with the chat and other functionality.</p> <p>Firestore) <pre><code>/users\n   /{uid}\n      { blockedUsers: [ other user uid a, b, c, d ] }\n</code></pre></p> <p>Database) <pre><code>/blockedUsers\n  /{uid}\n   [ a , b, c ]\n</code></pre></p> <p>You can simply add the other user\u2019s UID as a string in the user\u2019s blockedUsers array field. You can do it with a backend query Or you can use blockUser custom action.</p> <p>There is no default UI for listing blocked users.</p> <p>To remove a user from blocking, just remove the user\u2019s UID from blockedUsers array field.</p>"},{"location":"building_with_flutter/","title":"Flutter App Development","text":"<ul> <li> <p>This page will teach you how to use the Super library with Flutter to build apps. If you are only interested in building apps with FlutterFlow, this page is not for you.</p> </li> <li> <p>The Super Library is a powerful package built for FlutterFlow, offering user management, chat, and forum features. While designed for FlutterFlow, it's also compatible with Flutter projects. This guide will help you integrate it into your Flutter application.</p> </li> <li> <p>Note that the Super Library has minimal data modeling to better support JSON-type data in FlutterFlow. Therefore, it's a good idea to build your own data models in your code.</p> </li> <li> <p>Refer Developer Tip for more information</p> </li> </ul>"},{"location":"building_with_flutter/#installation","title":"Installation","text":"<ul> <li>Configure your Flutter project with a Firebase project</li> <li>Install <code>super_library</code> as dependency</li> </ul> <pre><code>dependencies:\n  super_library: ^1.0.0  # Replace with the latest version\n</code></pre> <ul> <li>If you see too many problems in the <code>Problems Tab</code> in VSCode, you may hide it with <code>dart.analysisExcludedFolders</code> settings.</li> </ul>"},{"location":"building_with_flutter/#security-rules","title":"Security Rules","text":""},{"location":"building_with_flutter/#setup-in-maindart","title":"Setup in main.dart","text":"<ul> <li>Firebsae initialization</li> </ul>"},{"location":"chat/","title":"Chat","text":"<ul> <li>Chat</li> <li>Chat Logic</li> <li>User Invitation and Consent</li> <li>Chat Room Database Structure<ul> <li>Chat Room Fields</li> <li>Example of <code>users</code> Field</li> </ul> </li> <li>Chat Message Database Structure</li> <li>How Chat Room Works</li> <li>Sending a chat message</li> <li>Settings</li> <li>Chat Room</li> <li>How to Create a Chat Room</li> <li>How to Update a Chat Room</li> <li>Example</li> <li>How to list my Chat Room List</li> <li>Customizing Chat Room List with Custom Code</li> <li>Customizing Chat Room List with Component</li> <li>How to list Open Chat Rooms</li> <li>Customizing Open Chat Room List with Custom Code</li> <li>Customizing Open Chat Room List with Component</li> <li>Opening a chat room screen</li> <li>Inviting a user into a chat room</li> <li>Chat room leave</li> <li>Logic of blocking user</li> <li>UI and UX</li> <li>Widgets</li> <li>ChatMessageListView<ul> <li>Callback functions on ChatMessageListView</li> </ul> </li> <li>Displaying no of new messages<ul> <li>Dsiplaying all the no of new messages</li> </ul> </li> <li>Developer's guide</li> <li>Testing chat room icon</li> <li>Known Issues</li> <li>Chat room update and sync with chat join</li> <li>No of Chat room message for blocked user</li> <li>Unblock and new message</li> <li>Push notification</li> </ul>"},{"location":"chat/#chat-logic","title":"Chat Logic","text":""},{"location":"chat/#user-invitation-and-consent","title":"User Invitation and Consent","text":"<p>We prevent bad users from sending messages to good users.</p>"},{"location":"chat/#chat-room-database-structure","title":"Chat Room Database Structure","text":"<ul> <li>/chat/rooms/{room-id}: Chat room information is being saved in the node.</li> </ul>"},{"location":"chat/#chat-room-fields","title":"Chat Room Fields","text":"<ul> <li><code>users</code>: A map of uid list.</li> </ul> <p>Each chat room has a <code>users</code> field, which is a map with user IDs (<code>uid</code>) as keys and a boolean as values.</p>"},{"location":"chat/#example-of-users-field","title":"Example of <code>users</code> Field","text":"<pre><code>{\n  \"users\": {\n    \"A\": true,\n    \"B\": false\n  }\n}\n</code></pre>"},{"location":"chat/#chat-message-database-structure","title":"Chat Message Database Structure","text":"<ul> <li>/chat/messages/{room-id}/{message-id}: chat messages are saved under the <code>/chat/messages/{room-id}</code> node.</li> </ul>"},{"location":"chat/#how-chat-room-works","title":"How Chat Room Works","text":"<ol> <li>Creating a Chat Room:<ol> <li>When User A starts a chat with User B, a chat room is created with the <code>users</code> field.</li> <li><code>A: true</code> means User A has initiated the chat.</li> <li><code>B: false</code> means User B has not yet accepted the chat.</li> </ol> </li> <li>Visibility of Chat Room:<ol> <li>The chat room appears in User A's chat room list.</li> <li>The chat room does not appear in User B's chat room list until User A sends a message.</li> </ol> </li> <li>Sending a Message:<ol> <li>When User A sends a message, the chat room becomes visible in User B's chat room list.</li> </ol> </li> <li>User B's Consent:<ol> <li>Since <code>B</code> is <code>false</code>, User B sees a confirmation dialog when they tap on the chat room.</li> <li>If User B accepts, <code>B</code> is set to <code>true</code>, and the confirmation dialog will no longer appear.</li> </ol> </li> </ol> <p>This process ensures that users have control over who can send them messages and join their chat rooms.</p>"},{"location":"chat/#sending-a-chat-message","title":"Sending a chat message","text":"<ul> <li>When a chat message is sent,<ul> <li>the sender's uid, displayName, photoUrl are saved<ul> <li>/chat/messages/(room_id)/(message_id)</li> <li>/chat/joins/(room_user_uid)/(room_id)</li> </ul> </li> <li>the no of new message will be increased at<ul> <li><code>/chat/settings/(room_user_uid) { newMessageCount: 00 }</code> for total number for new message.</li> <li><code>/chat/joins/(room_user_uid)/(room_id): { newMessageCount: 00 }</code> for the number of each chat room.</li> </ul> </li> <li>If it's single chat room,<ul> <li>even if there is ther other user is not in the <code>users</code> field, it will send a message.<ul> <li>This is for the case of:<ul> <li>When A sends chat message to B for the first,</li> <li>Then A left the chat room with B,</li> <li>B enters the chat room</li> <li>B sends a message</li> <li>But the message is not delivered to B</li> <li>It sends a message from B to A even if A is not in the room.</li> </ul> </li> </ul> </li> <li>Note that when A creates the single chat room with B, A and B are added to the <code>users</code> field.</li> </ul> </li> </ul> </li> </ul>"},{"location":"chat/#settings","title":"Settings","text":"<ul> <li>Call <code>chatVerifiedUserOnly</code> custom action to set the option that only verified members can send chat messages<ul> <li>This is because;<ul> <li>There are many abusers; You may think no abusers would use your app. But trust me, there are whole lot of abusers;</li> <li>If anyone can be able to send message, abusers will send bad words, photos, links and they can do more.</li> <li>By calling the <code>chatVerifiedUserOnly</code> custom action call in <code>main.dart</code>, users who have <code>verified</code> field to true in their user documents can send messages and photos;<ul> <li>This option must be set the whole chat rooms; not indivisual chat rooms;</li> <li>And this option must includes all kinds of chat data including texts, images and files;</li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"chat/#chat-room","title":"Chat Room","text":""},{"location":"chat/#how-to-create-a-chat-room","title":"How to Create a Chat Room","text":"<ol> <li>Open Create Chat Room Dialog:</li> <li>Call the <code>createChatRoom</code> custom action<ol> <li>Alternatively, use <code>editChatRoom</code> which supports both creation and update.</li> </ol> </li> <li>Open the Chat Room:<ol> <li>After creating the chat room, open it for the user.</li> </ol> </li> </ol>"},{"location":"chat/#how-to-update-a-chat-room","title":"How to Update a Chat Room","text":"<ol> <li>Open Update Chat Room Dialog:</li> <li>Call the <code>updateChatRoom</code> custom action.<ol> <li>Alternatively, use <code>editChatRoom</code> which supports both creation and update.</li> </ol> </li> <li>Close the Dialog:<ol> <li>After updating the chat room, close the dialog.</li> </ol> </li> </ol> <p>Note that <code>ChatMessageListView</code> listens the changes of the chat room data and it update the memory cache. This means, only if the app is displaying the messages of the chat room, the chat room data will be updated into the memory cache. If the user is not displaying the chat room list view, the chat room data in memory cache will not be updated even if the chat room is updated.</p>"},{"location":"chat/#example","title":"Example","text":"<p>Here is an example of source code for creating or updating a chat room.</p> <pre><code>ElevatedButton(\n  onPressed: () async {\n    if (widget.roomId != null) {\n      await updateChatRoom(\n        widget.roomId!,\n        nameController.text,\n        descriptionController.text,\n        iconUrl,\n        open,\n        canInvite,\n      );\n      Navigator.of(context).pop();\n      return;\n    }\n    final roomId = await createChatRoom(\n      nameController.text,\n      descriptionController.text,\n      iconUrl,\n      open,\n      canInvite,\n    );\n    Navigator.of(context).pop();\n    showGeneralDialog(\n      context: context,\n      pageBuilder: (_, __, ___) {\n        return ChatRoomScreen(\n          roomId: roomId,\n        );\n      },\n    );\n  },\n  child: const Text('Save'),\n</code></pre>"},{"location":"chat/#how-to-list-my-chat-room-list","title":"How to list my Chat Room List","text":"<ol> <li> <p>Add ChatRoomListView custom widget into body in a screen</p> </li> <li> <p>Use onTap action to open a chat room.</p> </li> </ol>"},{"location":"chat/#customizing-chat-room-list-with-custom-code","title":"Customizing Chat Room List with Custom Code","text":"<p>Below is a sample code of how you can use the chat room list view widget.</p> <pre><code>ChatRoomListView(\n  onTap: (roomId) =&gt; showGeneralDialog(\n    context: context,\n    pageBuilder: (_, __, ___) {\n      return ChatRoomScreen(roomId: roomId);\n    },\n  ),\n),\n</code></pre>"},{"location":"chat/#customizing-chat-room-list-with-component","title":"Customizing Chat Room List with Component","text":"<ol> <li> <p>Make a Component with your own Design</p> </li> <li> <p>Connect your component to Component.chatRoomListTile.</p> </li> </ol> <pre><code>Component.chatRoomListTile = (join) =&gt; ChatRoomListTileWidget(\n      roomId: join.roomId,\n      name: join.name,\n      iconUrl: join.iconUrl,\n      displayName: join.displayName,\n      photoUrl: join.photoUrl,\n      group: join.group,\n      single: join.single,\n      open: join.open,\n      lastMessageAt: join.lastMessageAt,\n      lastMessageDeleted: join.lastMessageDeleted,\n      lastText: join.lastText,\n      lastUrl: join.lastUrl,\n      lastProtocol: join.lastProtocol,\n      unreadMessageCount: join.unreadMessageCount,\n    );\n</code></pre>"},{"location":"chat/#how-to-list-open-chat-rooms","title":"How to list Open Chat Rooms","text":"<ol> <li> <p>Add OpenChatRoomListView custom widget into body in a screen</p> </li> <li> <p>Use onTap action to open a chat room.</p> </li> </ol>"},{"location":"chat/#customizing-open-chat-room-list-with-custom-code","title":"Customizing Open Chat Room List with Custom Code","text":"<p>Below is a sample code of how you can use the chat room list view widget.</p> <pre><code>OpenChatRoomListView(\n  onTap: (roomId) =&gt; showGeneralDialog(\n    context: context,\n    pageBuilder: (_, __, ___) {\n      return ChatRoomScreen(\n        roomId: roomId,\n      );\n    },\n  ),\n)\n</code></pre>"},{"location":"chat/#customizing-open-chat-room-list-with-component","title":"Customizing Open Chat Room List with Component","text":"<ol> <li> <p>Make a Component with your own Design</p> </li> <li> <p>Connect your component to Component.chatRoomListTile.</p> </li> </ol> <pre><code>Component.openChatRoomListTile = (room) =&gt; OpenChatRoomListTileWidget(\n      roomId: room.id,\n      name: room.name,\n      description: room.description,\n      iconUrl: room.iconUrl,\n      users: room.users,\n      blockedUsers: room.blockedUids,\n      masterUsers: room.masterUsers,\n      createdAt: room.createdAt,\n      updatedAt: room.updatedAt,\n      open: room.open,\n      openCreatedAt: room.openCreatedAt,\n      single: room.single,\n      group: room.group,\n      lastMessageAt: room.lastMessageAt,\n      allMembersCanInvite: room.allMembersCanInvite,\n    );\n</code></pre>"},{"location":"chat/#opening-a-chat-room-screen","title":"Opening a chat room screen","text":"<ol> <li> <p>Create a chat room screen with parameter roomId as String</p> </li> <li> <p>Add ChatMessageListView custom widget from Super library and pass the roomId onto it.</p> </li> <li> <p>Add a TextField widget and a Button</p> </li> <li>Name the TextField as text</li> <li> <p>When the button is pressed, call sendChatMessage custom action from the super library with the text.</p> </li> <li> <p>Then open the chat room screen by passing a user\u2019s uid. And continue chat.</p> </li> </ol>"},{"location":"chat/#inviting-a-user-into-a-chat-room","title":"Inviting a user into a chat room","text":"<ol> <li>Add a button on a group chat room to open a user-invite screen.</li> <li> <p>Pass the chat room id over the user-invite screen.</p> </li> <li> <p>In the user invite screen, you can search a user as described in User search</p> </li> <li> <p>Call the inviteChatUser custom action to invite the user into the chat room.</p> </li> <li>Pass the room id and the searched user uid.</li> </ol>"},{"location":"chat/#chat-room-leave","title":"Chat room leave","text":"<ul> <li>When user-A leaves the chat room with user-B,</li> <li> <p>The message from user-B will no longer delivered to user-A</p> </li> <li> <p>For the user-A to enter the chat room with user-B, user-A must find user-B and enter chat room.</p> </li> <li>Then, the message from user-B will appear in the chat message list view.</li> </ul>"},{"location":"chat/#logic-of-blocking-user","title":"Logic of blocking user","text":"<ul> <li> <p>When a User-A blocks another User-B, </p> <ul> <li>The <code>blockUser</code> custom action makes the User-A leaves the chat room with User-B if there is a chat room between A and B.</li> <li>A cannot join the chat room with B.</li> <li>A cannot send a chat message to B.</li> </ul> </li> <li> <p>User can report a chat room. But there is no way to block a chat room.</p> </li> </ul>"},{"location":"chat/#ui-and-ux","title":"UI and UX","text":"<ul> <li> <p>The login user cannot join the chat room and cannot send message to the blocked users.</p> <ul> <li>The super library will throw exceptions</li> </ul> </li> <li> <p>For blocked user, It is recommended to</p> <ul> <li>when the chat button is being pressed, alert the login user before entering the chat room that the other user is blocked;</li> <li>or disable the chat button for the blocked users;</li> <li>If you don't handle the exception,</li> <li>The chat message list view may still display chat messages and the it may look like sending message works.</li> </ul> </li> </ul>"},{"location":"chat/#widgets","title":"Widgets","text":""},{"location":"chat/#chatmessagelistview","title":"ChatMessageListView","text":""},{"location":"chat/#callback-functions-on-chatmessagelistview","title":"Callback functions on ChatMessageListView","text":"<ul> <li>onTapProfilePhoto: This callback function be called a user taps on another user's profile photo. The callback will deliver uid, dsiplayName, photoUrl of the other user.<ul> <li>Purpose: Display user public profile screen when the other user's photo is being tapped.</li> </ul> </li> </ul>"},{"location":"chat/#displaying-no-of-new-messages","title":"Displaying no of new messages","text":""},{"location":"chat/#dsiplaying-all-the-no-of-new-messages","title":"Dsiplaying all the no of new messages","text":"<p>Use the following widget to display all the unread no of new messages.</p> <pre><code>const ChatAllNewMessageCounter(),\n</code></pre>"},{"location":"chat/#developers-guide","title":"Developer's guide","text":""},{"location":"chat/#testing-chat-room-icon","title":"Testing chat room icon","text":"<p>Simply pass the chat room id which has chat room icon url and you will see how it works.</p> <pre><code>ChatRoomIcon(\n  roomId: '-O9JXcdeMWOaCxOMiKBP',\n  width: 60,\n  height: 60,\n  radius: 24,\n),\n</code></pre>"},{"location":"chat/#known-issues","title":"Known Issues","text":""},{"location":"chat/#chat-room-update-and-sync-with-chat-join","title":"Chat room update and sync with chat join","text":"<ul> <li>When the master changes the chat room name or icon, it is updated in the chat room data, but it's not updated in chat joins in realtime.<ul> <li>This is not a critical issue and we are planning to fix it some day later.</li> </ul> </li> </ul>"},{"location":"chat/#no-of-chat-room-message-for-blocked-user","title":"No of Chat room message for blocked user","text":"<p>@TODO: This clause is ambiguios. Update it more.</p> <ul> <li> <p>Login user is A, the other user id B</p> <ul> <li>A sent 2 messages to B<ul> <li>The no of new messages is 2.</li> <li>Then, A blocked B.<ul> <li>The no of new messages is still 2.</li> </ul> </li> </ul> </li> </ul> </li> <li> <p>This is a known issue. But it's not critical. And this may be fixed sometime later.</p> </li> </ul>"},{"location":"chat/#unblock-and-new-message","title":"Unblock and new message","text":"<ul> <li>When A unblocks B,</li> <li>The new message of B to A should be delivered.</li> </ul> <p>But as of now, it's not delivered. We will fix it soon.</p>"},{"location":"chat/#push-notification","title":"Push notification","text":"<ul> <li>To know more about how chat send push notification, refer Push notification document.</li> </ul>"},{"location":"cloud_functions/","title":"Cloud Functions","text":"<p>There are many ways of deploying Cloud functions. And since FlutterFlow has its own cloud functions feature for editing and deploying code to Firebase, we decided to build the cloud functions in JavaScript. FlutterFlow developers can simply copy the code and paste it into their FlutterFlow cloud functions menu.</p> <p>These cloud functions can be used with any FlutterFlow project, even if you are not using the Super Library.</p>"},{"location":"cloud_functions/#rules","title":"Rules","text":"<ul> <li>All cloud function calls return an object.</li> <li>If a cloud function call encounters an error, it returns an object containing the <code>error</code> field instead of throwing an exception. This applies to both <code>HTTP requests</code> and <code>callable functions</code>.</li> <li>Handling exceptions from Cloud Functions in FlutterFlow can be challenging, so our cloud functions always return as if they were successful.</li> <li>To check if a call failed, simply check for the presence of the <code>error</code> field in the return object.</li> <li>If there is an error, the return object will look like <code>{ error: ..., message: ... }</code>.<ul> <li>The <code>error</code> has an error code and the <code>message</code> has the detail error message.</li> </ul> </li> </ul>"},{"location":"cloud_functions/#fcm-token-mirroring","title":"FCM token mirroring","text":""},{"location":"cloud_functions/#creating-emailpassword-account","title":"Creating email/password account","text":"<p>https://github.com/thruthesky/super-library-firebase/blob/main/create-email-password-account/functions/index.js</p>"},{"location":"cloud_functions/#push-notifications","title":"Push notifications","text":""},{"location":"comment/","title":"Comment API","text":"<p>The <code>Comment API</code> offers a powerful and simple way to add comment feature to your app. It's versatile, perfect for things like blog comments, product reviews, or photo feedback.</p> <p>It offers a complete set of UI/UX widgets and logics for managing comments including but not limited to CRUD, file uploading, likes, and much more.</p>"},{"location":"comment/#overview","title":"Overview","text":"<ul> <li>It is best to use the SliverListView as it can get the comments little by little as user scrolls the screen up and down.</li> <li>We can custom code it but it's not easy to provides a custom ui customization.<ul> <li>Until we find a way, we simply get all comments of the comments of the data and display it in list view.</li> </ul> </li> <li>And if you are building app with Flutter without FlutterFlow, we recommend you to use the SliverListView. And we encourage you to use Flutter (without FlutterFlow) if yo are good at source coding.</li> </ul>"},{"location":"comment/#terms","title":"Terms","text":"<ul> <li><code>Root</code>: An object that the comments belong to. It can be a user, photo, product item, blog/post, or whatever.</li> <li><code>First level comments</code>: are comments created directly under a Root.</li> </ul>"},{"location":"comment/#database-structure-of-comment","title":"Database Structure of Comment","text":""},{"location":"comment/#widgets","title":"Widgets","text":""},{"location":"comment/#commentinputbox","title":"CommentInputBox","text":"<p>This is a simple comment create widget.</p> <pre><code>CommentInputBox(\n  parent: comment,\n),\n</code></pre> <pre><code>SliverToBoxAdapter(\n  child: CommentFakeInputBox(\n    onTap: () =&gt; CommentService.instance.showCommentEditDialog(\n      context: context,\n      documentReference: ref,\n      focusOnContent: true,\n    ),\n  ),\n),\n</code></pre>"},{"location":"comment/#displaying-comments","title":"Displaying comments","text":"<p>The <code>easy_comment</code> provides two list view widgets for displaying comments.</p> <p>You can copy the code from <code>easy_comment</code> and build your own comment list view widget for different UI/UX,</p>"},{"location":"comment/#commentlistview","title":"CommentListView","text":"<p>The first one is <code>CommentListView</code>. This is similar two <code>ListView</code>.</p> <p>You can use <code>CommentListView</code> like below to display the comments.</p> <pre><code>CommentListView(\n  documentReference: ref,\n  shrinkWrap: true,\n  physics: const NeverScrollableScrollPhysics(),\n  itemBuilder: (comment, index) =&gt;\n      CommentListDetail(comment: comment),\n),\n</code></pre> <p>For the <code>itemBuilder</code>, you may use one of <code>CommentDetail</code>, <code>CommentListDetail</code>, <code>CommentListArrowDetail</code>, or <code>CommentListVerticalLineDetail</code>. Or you can copy the code and build your own.</p> <p>Example: Below is an example of using the available widgets.</p> <pre><code>CommentListView(\n  documentReference: ref,\n  itemBuilder: (comment, index) {\n    return CommentListDetail(comment: comment); // default\n    return CommentListArrowDetail(comment: comment); // arrow style comment\n    return CommentListVerticalLineDetail(comment: comment); // vertical line comment\n  },\n),\n</code></pre>"},{"location":"comment/#commentlisttreeview","title":"CommentListTreeView","text":"<p><code>CommentListTreeView</code> provides a nice tree style vertical lines on the nested comment list. It is designed to work in sliver scroll view. So, you should use <code>CustomScrollView</code> on the screen.</p> <pre><code>SliverToBoxAdapter(\n  child: CommentFakeInputBox(\n    onTap: () =&gt; CommentService.instance.showCommentEditDialog(\n      context: context,\n      documentReference: task.ref,\n      focusOnContent: true,\n    ),\n  ),\n),\nCommentListTreeView(documentReference: task.ref),\n</code></pre>"},{"location":"comment/#oncreate-callback","title":"onCreate CallBack","text":"<p>The <code>onCreate</code> is a callback after the comment is created. You can use this callback to do something comment post is created.</p> <p>Usage: (e.g. send push notification to ancestor uid)</p> <p>In the example below, we can send push notification to ancestor uid after the comment is created. It contains the newly created <code>comment</code> information.</p> <p>First we get the ancestor uids after the comment is created, then we send a push notification to the ancestor uids.</p> <pre><code>    CommentService.instance.init(\n      onCreate: (Comment comment) async {\n        /// get ancestor uid\n        List&lt;String&gt; ancestorUids =\n            await CommentService.instance.getAncestorsUid(comment.id);\n        /// get post information\n        Post post = await Post.get(comment.documentReference.id);\n        if (myUid != null &amp;&amp; post.uid != myUid) {\n          ancestorUids.add(post.uid);\n        }\n\n        if (ancestorUids.isEmpty) return;\n\n        /// set push notification to remaining uids\n        /// can get comment or post to send more informative push notification\n        MessagingService.instance.sendMessageToUids(\n          uids: ancestorUids,\n          title: 'title ${DateTime.now()}',\n          body: 'ancestorComment test ${comment.content}',\n          data: {\n            \"action\": 'comment',\n            'commentId': comment.id,\n            'postId': comment.documentReference.id,\n          },\n        );\n      },\n    );\n</code></pre>"},{"location":"comment/#development-tips","title":"Development Tips","text":""},{"location":"comment/#testing","title":"Testing","text":"<pre><code>import 'package:easy_comment/easy_comment.dart';\nimport 'package:easy_post_v2/easy_post_v2.dart';\nimport 'package:easyuser/easyuser.dart';\nimport 'package:flutter/material.dart';\n\nclass CommentTestScreen extends StatefulWidget {\n  static const String routeName = '/CommentTest';\n  const CommentTestScreen({super.key});\n\n  @override\n  State&lt;CommentTestScreen&gt; createState() =&gt; _CommentTestScreenState();\n}\n\nclass _CommentTestScreenState extends State&lt;CommentTestScreen&gt; {\n  @override\n  Widget build(BuildContext context) {\n    // final ref = my.ref;\n    // final ref = Post.col.doc('1zsZ2YMplgZN6D6bdZIn');\n    // final ref = Post.col.doc('0-console');\n    // final ref = Post.col.doc('0-console-2');\n    // final ref = Post.col.doc('0-con-3');\n    // final ref = Post.col.doc('0-a');\n    // final ref = Post.col.doc('0-b');\n    // final ref = Post.col.doc('0-c');\n    final ref = Post.col.doc('0-4');\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('CommentTest'),\n      ),\n      body: Padding(\n        padding: const EdgeInsets.fromLTRB(24.0, 24, 24, 0),\n        child: MyDocReady(\n          builder: () =&gt; ListView(\n            padding: const EdgeInsets.all(0),\n            children: [\n              Text('Reference: ${ref.path}'),\n              const SizedBox(height: 24),\n              CommentFakeInputBox(\n                onTap: () =&gt; CommentService.instance.showCommentEditDialog(\n                  context: context,\n                  documentReference: ref,\n                  focusOnContent: true,\n                ),\n              ),\n              CommentInputBox(\n                documentReference: ref,\n              ),\n              CommentListView(\n                documentReference: ref,\n                shrinkWrap: true,\n                physics: const NeverScrollableScrollPhysics(),\n                itemBuilder: (comment, index) =&gt;\n                    CommentListArrowDetail(comment: comment),\n              ),\n            ],\n          ),\n        ),\n      ),\n      bottomNavigationBar: SafeArea(\n        top: false,\n        child: CommentFakeInputBox(\n          onTap: () =&gt; CommentService.instance.showCommentEditDialog(\n            context: context,\n            documentReference: ref,\n            focusOnContent: true,\n          ),\n        ),\n      ),\n    );\n  }\n}\n</code></pre>"},{"location":"core_developer_guide_line/","title":"Core Developer\u2019s Guideline","text":"<p>Developing a super library in the FlutterFlow dashboard is not recommended. It's much faster to develop using VSCode.</p>"},{"location":"core_developer_guide_line/#recommended-setup","title":"Recommended Setup","text":"<ol> <li>Create a Flutter Project:</li> <li> <p>Name the project <code>super_library_flutter_example</code>.</p> </li> <li> <p>Download the Super Library Code:</p> </li> <li> <p>Use the VSCode extension <code>FF Download Code</code> to download the FlutterFlow Super Library code into the <code>super_library_flutter_example</code> Flutter project.</p> </li> <li> <p>Download the Example App Code:</p> </li> <li>Create a FlutterFlow app that consumes the super library.</li> <li>Use the VSCode extension <code>FF Download Code</code> to download the FlutterFlow example app that consumes the Super Library.</li> </ol>"},{"location":"core_developer_guide_line/#example-setup","title":"Example Setup","text":"<p>Below are my(JaeHo, Song) setup;</p> <ol> <li>Create the Flutter Project:</li> <li> <p>Path: <code>/Users/thruthesky/apps/flutter/ff-libraries/super_library_example</code></p> </li> <li> <p>Download the Super Library Code:</p> </li> <li> <p>Path: <code>/Users/thruthesky/apps/flutter/ff-libraries/super_library_example/super-library-5mglde</code></p> </li> <li> <p>Download the FlutterFlow Example Project:</p> </li> <li>Path: <code>/Users/thruthesky/tmp/ff-examples/test-super-library-ldkmay</code></li> </ol>"},{"location":"core_developer_guide_line/#working-with-multiple-projects","title":"Working with Multiple Projects","text":"<ul> <li>Open all the three VSCode projects simultaneously.</li> <li>Edit the Super Library code within the <code>super_library_flutter_example</code> Flutter project.</li> <li>Test the Super Library code while editing it.</li> <li>Perform final tests in the FlutterFlow example project (<code>test-super-library-ldkmay</code>).</li> </ul>"},{"location":"core_developer_guide_line/#tips","title":"Tips","text":"<ul> <li>Use Git for version control: GitHub Repository</li> <li>For more information, contact the creator.</li> </ul>"},{"location":"custom_actions/","title":"Custom Actions","text":""},{"location":"custom_actions/#isanonymous","title":"isAnonymous","text":"<p>The <code>isAnonymous</code> function checks if the current user is anonymous.</p>"},{"location":"custom_actions/#how-it-works","title":"How It Works","text":"<ul> <li>Returns <code>true</code>: If the user is signed in and is anonymous.</li> <li>Returns <code>false</code>: If the user is not signed in or is not anonymous.</li> </ul>"},{"location":"custom_design/","title":"Custom Design","text":""},{"location":"custom_functions/","title":"Custom Functions","text":"<ul> <li>Custom Functions</li> <li><code>endRange</code><ul> <li>Purpose</li> <li>Why Use This Function?</li> <li>Example Use Case</li> <li>Backend Query Example</li> </ul> </li> <li><code>dateTimeOf</code> Custom Function<ul> <li>Returns</li> <li>Behavior</li> <li>Example of using the <code>dateTimeOf</code> custom function</li> </ul> </li> <li><code>shortDateTimeOf(DateTime date)</code></li> <li><code>double depth(int n)</code></li> <li><code>generateEmptyList(int length)</code></li> <li><code>List&lt;String&gt; keys(dynamic json)</code></li> </ul>"},{"location":"custom_functions/#endrange","title":"<code>endRange</code>","text":""},{"location":"custom_functions/#purpose","title":"Purpose","text":"<p>Returns the end string of the search range.</p>"},{"location":"custom_functions/#why-use-this-function","title":"Why Use This Function?","text":"<p>This function is designed for querying a string field within a specific range.</p>"},{"location":"custom_functions/#example-use-case","title":"Example Use Case","text":"<p>Suppose you want to search for names that begin with \"You\". You can query like this:</p> <pre><code>name &gt;= \"You\" &amp;&amp; name &lt; \"You\\uf8ff\"\n</code></pre>"},{"location":"custom_functions/#backend-query-example","title":"Backend Query Example","text":"<p>Below is an example of a backend query in a ListView to perform a case-insensitive user search.</p> <p></p>"},{"location":"custom_functions/#datetimeof-custom-function","title":"<code>dateTimeOf</code> Custom Function","text":"<p>The <code>dateTimeOf</code> custom function converts a number into a <code>DateTime</code> object. The parameter should be a timestamp in seconds or milliseconds.</p>"},{"location":"custom_functions/#returns","title":"Returns","text":"<p>A <code>DateTime</code> object from a timestamp.</p>"},{"location":"custom_functions/#behavior","title":"Behavior","text":"<ul> <li>Seconds to Milliseconds: If the timestamp is in seconds, it will be converted to milliseconds and returns into the DateTime of it.</li> <li>Null Timestamp: If the timestamp is null, it will return the current time.</li> <li>Non-Integer Timestamp: If the timestamp is not an integer, it will throw an exception.</li> <li>Negative Timestamp: If the timestamp is negative, it will throw an exception.</li> <li>Zero Timestamp: If the timestamp is zero, it will return the current time.</li> </ul>"},{"location":"custom_functions/#example-of-using-the-datetimeof-custom-function","title":"Example of using the <code>dateTimeOf</code> custom function","text":"<p>See below to understand better on how to using it.</p> <p></p>"},{"location":"custom_functions/#shortdatetimeofdatetime-date","title":"<code>shortDateTimeOf(DateTime date)</code>","text":""},{"location":"custom_functions/#double-depthint-n","title":"<code>double depth(int n)</code>","text":"<ul> <li>Returns </li> </ul>"},{"location":"custom_functions/#generateemptylistint-length","title":"<code>generateEmptyList(int length)</code>","text":"<p>Returns a list of element.</p> <ul> <li>Use this to generate a list of element to use it in a <code>Generate dynamic children</code> panel.</li> </ul>"},{"location":"custom_functions/#liststring-keysdynamic-json","title":"<code>List&lt;String&gt; keys(dynamic json)</code>","text":"<p>Returns the keys of the JSON object.</p> <ul> <li><code>json</code> can be null, or JSON type data.</li> </ul>"},{"location":"dart_extensions/","title":"Dart Extensions","text":""},{"location":"dart_extensions/#string-extensions","title":"String Extensions","text":""},{"location":"dart_extensions/#or-method","title":"<code>or</code> Method","text":"<p>The <code>or</code> method replaces the string with the provided parameter if the original string is null or empty.</p>"},{"location":"dart_extensions/#example","title":"Example","text":"<pre><code>user.displayName.or('...')\n</code></pre> <p>In this example, if user.displayName is null or empty, it will be replaced with '...'.</p>"},{"location":"data/","title":"Data","text":"<p>Imagine you are building a social app that displays users' tweets, photos, and comments on a scrollable main screen. If your app grows, using Firestore can become expensive due to the costs associated with reading, writing, and downloading the size of documents from Firestore.</p> <p>Using the Realtime Database is faster, cheaper, and simpler.</p> <ul> <li>Data</li> <li>Features</li> <li>Suggested Use Cases</li> <li>Installation</li> <li>Database Structure<ul> <li>Security</li> <li>Data Format</li> <li>Example Structure</li> <li>Fields of a Node</li> </ul> </li> <li>Openning data list screen</li> <li>Create a data</li> <li>List data group by category<ul> <li>Custom design on data list screen</li> <li>Display data value in custom design</li> </ul> </li> <li>Displaying Data Details</li> <li>Reactivity of the Data<ul> <li>DataChange widget</li> </ul> </li> <li>Data custom actions<ul> <li>createData</li> <li>updateData</li> <li>readData</li> <li>deleteData</li> </ul> </li> <li>Developer's guide line<ul> <li>To get data of a category in order</li> </ul> </li> </ul>"},{"location":"data/#features","title":"Features","text":"<p>The <code>Data</code> provides default CRUD operations for the Realtime Database:</p> <ul> <li>readData: Custom action to read data.</li> <li>createData: Custom action to create data.</li> <li>updateData: Custom action to update data.</li> <li>deleteData: Custom action to delete data.</li> <li>DataListView: Widget to display a list of values in a data group.</li> <li>DataChange: Widget that calls a callback action when the data changes. It is used to display the changes of the data on the screen.</li> </ul> <p>With the <code>Comment</code>, you can easily build blog or forum community apps. Refer to the <code>Comment</code> documentation for more details.</p>"},{"location":"data/#suggested-use-cases","title":"Suggested Use Cases","text":"<p>If you want to build the following features in your apps, <code>Data</code> functionality is good;</p> <ul> <li>Blogs, News, Reminders</li> <li>Forum (Built-in BBS) based community apps</li> <li>Social apps with listing/scrolling activity wall screen</li> <li>Shopping mall apps</li> <li>Any functionality that related in creating and listing articles</li> </ul>"},{"location":"data/#installation","title":"Installation","text":"<pre><code>\"data\": {\n  \".read\": true,\n  \"$key\": {\n    \".write\": \"newData.child('uid').val() === auth.uid || ( data.child('uid').val() === auth.uid &amp;&amp; !newData.exists() )\",\n    \"category\": {\n      \".validate\": \"newData.val().length &gt; 0\"\n    }\n  }\n},\n</code></pre>"},{"location":"data/#database-structure","title":"Database Structure","text":"<p>To achieve the concept of <code>SSOT</code> (Single Source of Truth), we save all data in the <code>/data</code> node in the Realtime Database.</p>"},{"location":"data/#security","title":"Security","text":"<ul> <li>To prevent attacks that involve writing excessively large data (e.g., very long titles or content), you can add security rules to limit the size of these fields.<ul> <li>By default, the title is limited in <code>2048</code> letters and the content is limited in <code>65536</code> letters by the security rules. You can change them and add more rules.</li> </ul> </li> </ul>"},{"location":"data/#data-format","title":"Data Format","text":"<ul> <li>Data in the Realtime Database is stored in JSON format.</li> <li>The first level of keys in the <code>/data</code> node are the IDs of the data entries.</li> <li>The second level of keys are the properties of each data entry.</li> </ul>"},{"location":"data/#example-structure","title":"Example Structure","text":"<pre><code>/data {\n    \"key-1\": {\n        \"property-1\": \"...\",\n        \"property-2\": \"...\"\n    },\n    \"key-2\": {\n        \"property-1\": \"...\",\n        \"property-2\": \"...\"\n    }\n}\n</code></pre>"},{"location":"data/#fields-of-a-node","title":"Fields of a Node","text":"<ul> <li>uid: The creator's user ID.</li> <li>category: The category of the data, ordered by recent data(article).</li> <li>order: The order of the data.</li> <li>title: The title of the data.</li> <li>content: The content of the data.</li> <li>urls: URLs of photos and files associated with the data.</li> <li>createdAt: The creation timestamp.</li> <li>updatedAt: The update timestamp.</li> <li>custom fields: You can add as much extra fields as you want.</li> </ul> <p>Example representation:</p> <pre><code>/data\n  /key-1 {\n    \"category\": \"qna-1630000000000\",\n    \"order\": -1630000000000,\n    \"uid\": \"uid\",\n    \"title\": \"title\",\n    \"content\": \"content\",\n    \"urls\": [\"url1\", \"url2\"],\n    \"createdAt\": 1630000000000,\n    \"updatedAt\": 1630000000000\n  }\n</code></pre>"},{"location":"data/#openning-data-list-screen","title":"Openning data list screen","text":"<ul> <li>Create a screen to list the data.<ul> <li>Let's name it as <code>DataListScreen</code>.</li> <li>Add a required page parameter named <code>category</code> with the type of String.</li> </ul> </li> <li>Insert the <code>DataListView</code> in the body passing the <code>category</code> page parameter.</li> <li>Add a create button on the app bar.<ul> <li>When the user taps, open the <code>DataCreateScreen</code>.</li> </ul> </li> </ul>"},{"location":"data/#create-a-data","title":"Create a data","text":"<ul> <li>Create a screen to create a data.<ul> <li>Let's name it as <code>DataCreateScreen</code>.</li> <li>Add a required page parameter named <code>category</code> with the type of String.</li> </ul> </li> <li>Add some text fields with submit button.<ul> <li>Text field of title, content would be needed.</li> <li>You can add any extra fields(key/value pair) into the data.</li> </ul> </li> <li>When the user taps on the submit button, you can connect the <code>createData</code> custom action like below.<ul> <li>For category field, pass the category of page parameter.</li> <li>For title, pass the input text of title.</li> <li>For content, pass the input text of content.</li> <li>For extra field, you need to pass an JSON object. It is a good idea to create a <code>Create Map</code> to save extra keys/values into the data.</li> <li>For urls field, you need to pass a List of String. It can by an empty List.</li> </ul> </li> </ul> <ul> <li>Add <code>onCreate</code> action to navigate back to the DataListScreen.</li> <li>Add <code>onFailure</code> action to dsiplay the error.</li> </ul>"},{"location":"data/#list-data-group-by-category","title":"List data group by category","text":"<ul> <li> <p>Create a screen named <code>DataListScreen</code> to display the list of a data group by category.</p> <ul> <li>Add a required page parameter named <code>category</code> with the type of String.</li> </ul> </li> <li> <p>Add <code>DataListView</code> super library widget into the body</p> </li> <li>Pass the category page parameter to the widget.</li> </ul>"},{"location":"data/#custom-design-on-data-list-screen","title":"Custom design on data list screen","text":"<ul> <li>If you want to customize the design in <code>DataListView</code> with your component.</li> <li>Create a component named as <code>AppDataListTile</code>. In fact, it can be any name.</li> <li>Simply pass the <code>AppDataListTile</code> to widget builder of the <code>DataListView</code> custom widget.<ul> <li>Display the data information in the <code>AppDataListTile</code> component. It's really upto you what information you want to show in your custom design.</li> <li>Add the <code>data</code> parameter of <code>JSON</code> type to your <code>AppDataListTile</code> component.</li> </ul> </li> </ul>"},{"location":"data/#display-data-value-in-custom-design","title":"Display data value in custom design","text":"<ul> <li> <p>Data passed to your component is in JSON. So, you can use the <code>JSON path</code> to display what's in the data. For instance</p> <ul> <li><code>$.title</code>: the title of the data</li> <li><code>$.content</code>: the content of the data</li> <li><code>$.uid</code>: the uid of the creator.<ul> <li>You can display the creator's avatar by passing the uid to <code>UserAvatar</code>.</li> <li>You can dispaly the creator's display name by passing the uid to <code>DisplayName</code>.</li> </ul> </li> <li><code>$.createdAt</code>: the timestamp of the data creation.</li> <li><code>$.urls</code>: the string array of urls that are saved with the data.</li> <li><code>$.category</code>: the category.</li> </ul> </li> <li> <p>You can add and display whatever key/value pairs as much as you want.</p> <ul> <li>Below is an example of showing the custom key/value data.</li> </ul> </li> </ul> <p></p>"},{"location":"data/#displaying-data-details","title":"Displaying Data Details","text":"<p>You can design the UI/UX based on your specific needs.</p> <p>To display full details of the data when tapped from the <code>DataListView</code> or a custom component, follow these steps:</p> <ol> <li>Create a Screen: </li> <li>Name it <code>DataViewScreen</code>.</li> <li> <p>Add a required page parameter named <code>data</code> of the JSON type.</p> </li> <li> <p>Open DataViewScreen:</p> </li> <li> <p>When an item is tapped in the <code>DataListView</code>, open <code>DataViewScreen</code> with the <code>data</code> parameter.</p> </li> <li> <p>Design DataViewScreen:</p> </li> <li>Customize the screen to display the data details.</li> <li>Consider adding the following buttons:<ul> <li><code>like</code></li> <li><code>reply</code></li> <li><code>chat</code></li> <li><code>block</code></li> <li><code>report</code></li> <li><code>edit</code></li> <li><code>delete</code></li> </ul> </li> <li>Add a tap action on the user's profile photo to open the user's public profile screen.</li> <li>Add a tap action to show the original image if displaying thumbnails.</li> </ol>"},{"location":"data/#reactivity-of-the-data","title":"Reactivity of the Data","text":""},{"location":"data/#datachange-widget","title":"DataChange widget","text":"<p>The <code>DataChange</code> widget listens and rebuild your component whenever the data changes.</p> <p>For instance, you build a forum app</p> <ul> <li>To reflect the changes of the title,</li> <li>Create a component named <code>PostTitle</code> with a String <code>title</code> parameter.<ul> <li>And display the <code>title</code> in the component.</li> </ul> </li> <li> <p>Then, add the <code>DataChange</code> widget on your screen(or a component)</p> <ul> <li>Passing the <code>dataKey</code> as the data key,</li> <li>and the <code>field</code> as <code>title</code>.</li> <li>Then, add the <code>PostTitle</code> component to the <code>builder</code> of the <code>DataChange</code> widget.</li> <li>pass the widget builder parameter <code>data</code> to <code>title</code> parameter of <code>PostTile</code> </li> </ul> </li> <li> <p>To reflect the content and other properties of the data,</p> </li> <li>Create a component named <code>PostData</code> with a JSON <code>data</code> parameter.<ul> <li>And display the properties of the data by accessing <code>$.title</code>, <code>$.content</code>, <code>$.uid</code>, <code>$.createdAt</code>, <code>$.urls</code>, and more.</li> <li>Since the parameter of the <code>data</code> is JSON and it has the whole data, you can display whatever you like.</li> </ul> </li> <li>Then, add the <code>DataChange</code> widget on yor screen(or a comment)<ul> <li>Passing the <code>dataKey</code> as the data key,</li> <li>and the <code>field</code> as null</li> <li>Then pass the <code>PostData</code> to the <code>builder</code> of the <code>DataChange</code> widget.</li> <li>Pass the widget builder parameter <code>data</code> to the <code>data</code> parameter of the  <code>PostData</code>.</li> </ul> </li> </ul> <p>You can use the <code>DataChange</code> to listen for the realtime update of the data.</p>"},{"location":"data/#data-custom-actions","title":"Data custom actions","text":""},{"location":"data/#createdata","title":"createData","text":""},{"location":"data/#updatedata","title":"updateData","text":""},{"location":"data/#readdata","title":"readData","text":"<ul> <li>You may use <code>readData</code> custom action to read the data on data update screen.</li> </ul>"},{"location":"data/#deletedata","title":"deleteData","text":"<ul> <li>onDelete: this callback action will be called if the data has been deleted.</li> <li>onFailure: this callback action will be called if the deletion has failed.</li> </ul>"},{"location":"data/#developers-guide-line","title":"Developer's guide line","text":""},{"location":"data/#to-get-data-of-a-category-in-order","title":"To get data of a category in order","text":"<pre><code>final ref = PostService.instance.postsRef\n    .orderByChild('category')\n    .startAt('$category-')\n    .endAt('$category-9999999999999999999999');\n\nfinal snapshot = await ref.get();\nfor (var v in snapshot.children) {\n  log('v: ${v.key}, value: ${(v.value as Map)[\"title\"]}');\n}\n</code></pre>"},{"location":"design/","title":"Design","text":""},{"location":"design/#design-customization","title":"Design Customization","text":""},{"location":"design/#ui-design-and-customization","title":"UI Design and Customization","text":"<p>The default UI design is built into the custom code, but you can override it.</p>"},{"location":"design/#updating-the-default-ui-design","title":"Updating the Default UI Design","text":"<p>You can update the default UI design in the Super Library by updating the Theme of your FlutterFlow project. The Super Library follows the FlutterFlow Theme system.</p>"},{"location":"design/#using-default-components","title":"Using Default Components","text":"<p>The Super Library provides default components. You can either use these default components or copy and paste them to create your own custom components.</p>"},{"location":"developer_guideline/","title":"Developer Guideline","text":"<ul> <li>Developer Guideline</li> <li>How to test comment</li> <li>snackbar</li> <li>confirm dialog</li> <li>error dialog</li> <li>Localization</li> <li>Get current locale</li> <li>User</li> <li>User data and UserData class</li> <li>Update user profile data</li> <li>To display widgets based on user's login status</li> <li>To display user avatar<ul> <li>User avatar update</li> </ul> </li> <li>Chat</li> <li>Chat Setup</li> <li>Displaying a chat message of a chat room</li> <li>Displaying a chat room screen with the chat message list view and chat input box</li> <li>Handling error on sending a chat message</li> <li>To display open chat room list</li> <li>To display my chat room list</li> <li>To display chat input message box based on the user login status</li> <li>Creating chat room with chat room ID</li> <li>Upload</li> <li>UploadImage</li> <li>Feed API</li> <li>Database Structure</li> </ul>"},{"location":"developer_guideline/#how-to-test-comment","title":"How to test comment","text":"<ul> <li>To test a comment creation, you would do something below;</li> </ul> <pre><code>final data = await Data.read('-O9sbecifMDVM5uBqVmL');\nprint(data.data);\nawait showModalBottomSheet(\n    isScrollControlled: true,\n    backgroundColor: Colors.transparent,\n    enableDrag: false,\n    context: context,\n    builder: (context) {\n    return GestureDetector(\n        onTap: () =&gt; FocusScope.of(context).unfocus(),\n        child: Padding(\n        padding: MediaQuery.viewInsetsOf(context),\n        child: ReplyForm(data: data.data),\n        ),\n    );\n    },\n);\n</code></pre> <ul> <li>To create a comment under the first level comment</li> </ul> <pre><code>final parent = await Comment.read('-OA6v73mJrhnwYDQSAAK');\nawait showModalBottomSheet(\n    isScrollControlled: true,\n    backgroundColor: Colors.transparent,\n    enableDrag: false,\n    context: context,\n    builder: (context) {\n    return GestureDetector(\n        onTap: () =&gt; FocusScope.of(context).unfocus(),\n        child: Padding(\n        padding: MediaQuery.viewInsetsOf(context),\n        child: ReplyForm(data: parent!.toJson()),\n        ),\n    );\n    },\n);\n</code></pre> <ul> <li>Create a data and its comment</li> </ul> <pre><code>createData(\n  context,\n  'cat-a',\n  'title',\n  'content',\n  [],\n  {},\n  (k) async {\n    print('Data created with key: $k');\n    final data = await readData(context, k);\n    createComment(context, data, 'a', [], {}, (commentKey) async {\n      print('Comment created with key: $commentKey');\n    }, null);\n  },\n  (e) async =&gt; print(e),\n);\n</code></pre>"},{"location":"developer_guideline/#snackbar","title":"snackbar","text":"<ul> <li>FlutterFlow has <code>showSnackbar</code> method and you can use it.</li> <li>Super library has <code>snackbar</code> method which is similiar to <code>showSnackbar</code>.</li> <li><code>snackbar</code> supports maximum of two lines while <code>showSnackbar</code> supports onlye one line.</li> <li><code>snackbar</code> displays the elipsis while <code>showSnackbar</code> displays overflow.</li> <li><code>snackbar</code> has <code>error</code> option to display the snackbar with error background.</li> </ul>"},{"location":"developer_guideline/#confirm-dialog","title":"confirm dialog","text":""},{"location":"developer_guideline/#error-dialog","title":"error dialog","text":""},{"location":"developer_guideline/#localization","title":"Localization","text":"<ul> <li> <p>Super library uses the default localization of Flutter SDK. And that is how FlutterFlow localize.</p> </li> <li> <p>By default, the localization and the related code are in the <code>super_library/lib/custom_code/actions/locale_api.dart</code>.</p> </li> <li> <p>If you want to change the default localization,</p> <ul> <li>You can edit the <code>locale_api.dart</code></li> <li>Or you can overwrite the locales with <code>LocalService.instance.add()</code>.</li> </ul> </li> <li> <p>The <code>LocaleService.instance.init()</code> is called by the <code>SuperLibrary</code> constructor. So, it will be available after SuperLibrary is instantiated.</p> </li> </ul> <pre><code>class _MyApp extends State&lt;MyApp&gt; {\n  @override\n  void initState() {\n    super.initState();\n    LocaleService.instance.add({\n      'super library': {\n        'en': 'Super Library',\n        'ko': '\uc288\ud37c \ub77c\uc774\ube0c\ub7ec\ub9ac',\n      },\n      'language': {\n        'en': 'Language',\n        'ko': '\uc5b8\uc5b4',\n      }\n    });\n  }\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp.router(\n      routerConfig: router,\n      localizationsDelegates: const [\n        FFLocalizationsDelegate(),\n        GlobalMaterialLocalizations.delegate,\n        GlobalWidgetsLocalizations.delegate,\n        GlobalCupertinoLocalizations.delegate,\n        FallbackMaterialLocalizationDelegate(),\n        FallbackCupertinoLocalizationDelegate(),\n      ],\n      supportedLocales: const [\n        Locale('en'),\n        Locale('ko'),\n      ],\n    );\n  }\n}\n</code></pre> <ul> <li>Then, use like below;</li> </ul> <p>Example:</p> <pre><code>ElevatedButton(\n  onPressed: () {\n    showSnackbar(\n      context,\n      context.tr('super library'),\n    );\n  },\n  child: Text('language'.tr(context)),\n),\n</code></pre> <ul> <li>Or you can use the <code>tr</code> method with a Map type.</li> </ul> <p>Example:</p> <pre><code>{\n  'en': 'Sign in with phone number',\n  'ko': '\uc804\ud654\ubc88\ud638\ub85c \ub85c\uadf8\uc778\uc744 \ud569\ub2c8\ub2e4.',\n}.tr(context)\n</code></pre> <ul> <li>You can add the texts directly to the <code>context.tr</code> method.</li> </ul> <pre><code>context.tr({'en': 'oooo', 'ko': 'xxxx'}); // returns the text based on the current language.\n</code></pre>"},{"location":"developer_guideline/#get-current-locale","title":"Get current locale","text":"<pre><code>Text('Locale: ${FFLocalizations.of(context).locale.languageCode}'),\n</code></pre>"},{"location":"developer_guideline/#user","title":"User","text":""},{"location":"developer_guideline/#user-data-and-userdata-class","title":"User data and UserData class","text":"<ul> <li> <p>The Super Library is designed for FlutterFlow and follows its database structure.</p> </li> <li> <p>FlutterFlow uses Firestore for user data storage.</p> </li> <li> <p>The Super Library focuses on using the Realtime Database.</p> <ul> <li>It mirrors user data from Firestore to the Realtime Database.</li> <li>When users update their profiles, the data is saved in the Realtime Database.</li> </ul> </li> <li> <p>The <code>UserData</code> class models user data in the Realtime Database.</p> </li> </ul>"},{"location":"developer_guideline/#update-user-profile-data","title":"Update user profile data","text":"<ul> <li>To update user profile data, use <code>UserService.instance.updateProfile</code> method.</li> </ul> <pre><code>UserService.instance.updateProfile(\n  displayName: displayName,\n  photoUrl: photoUrl,\n);\n</code></pre>"},{"location":"developer_guideline/#to-display-widgets-based-on-users-login-status","title":"To display widgets based on user's login status","text":"<ul> <li> <p><code>MyDoc</code> rebuilds the widget with <code>null</code> if:</p> </li> <li> <p>The user's document does not exist (user considered logged out) even if the user logged in</p> </li> <li>The user is not logged in</li> <li>The user is in the middle of logging in (already logged in, but document not yet loaded or while loading)</li> <li> <p>The user has logged in and docuemnt has loaded but the document is empty.</p> </li> <li> <p><code>MyDoc</code> rebuilds the widget with user data of <code>Map&lt;String, dynamic&gt;</code> type if:</p> </li> <li> <p>The user is logged in and the document is loaded and the document is not empty.</p> </li> <li> <p>Use <code>MyDoc</code> to display different widgets based on the user's login status.</p> </li> <li> <p><code>MyDoc</code> minimizes flickering, making it ideal for conditional rendering.</p> </li> <li> <p>Use <code>MyDoc</code> to display different widgets based on the user's login status. With <code>MyDoc</code>, you can display one widget when the user is logged in and another when they are logged out.</p> </li> <li><code>MyDoc</code> minimizes flickering, making it ideal for conditional rendering. So, it is a good idea to use <code>MyDoc</code> to display widgets based on the user's login status.</li> </ul> <p>Example:</p> <pre><code>return MyDoc(builder: (data) {\n  if (data == null) {\n    return const Center(\n      child: Text('Please sign in to view chat rooms'),\n    );\n  }\n  return OtherWidget( .. );\n}\n</code></pre>"},{"location":"developer_guideline/#to-display-user-avatar","title":"To display user avatar","text":"<ul> <li> <p>Use <code>UserAvatar</code> to display a user's photo including login user's photo from the Realtime Database.</p> </li> <li> <p>Note that the user's photo url will be saved into the Firestore and mirrored into the Realtime Database.</p> </li> <li> <p>To update the user's photo, use <code>UserService.instance.profileUpdate</code> method.</p> </li> </ul>"},{"location":"developer_guideline/#user-avatar-update","title":"User avatar update","text":"<pre><code>import 'package:easy_storage/easy_storage.dart';\nimport 'package:flutter/material.dart';\nimport 'package:super_library/custom_code/actions/super_library.dart';\nimport 'package:super_library/custom_code/widgets/index.dart';\n\nclass UserAvatarUpdate extends StatefulWidget {\n  const UserAvatarUpdate({super.key});\n\n  @override\n  State&lt;UserAvatarUpdate&gt; createState() =&gt; _UserAvatarUpdateState();\n}\n\nclass _UserAvatarUpdateState extends State&lt;UserAvatarUpdate&gt; {\n  double progress = 0;\n  final double radius = 50;\n  @override\n  Widget build(BuildContext context) {\n    return UploadIconButton.image(\n      onUpload: (url) async {\n        print('photo url: $url');\n        await UserService.instance.updateProfile(photoUrl: url);\n        setState(() {\n          progress = 0;\n        });\n      },\n      progress: (p) =&gt; setState(() =&gt; progress = p),\n      icon: Stack(\n        clipBehavior: Clip.none,\n        children: [\n          UserAvatar(\n            uid: myUid,\n            width: 120,\n            height: 120,\n            radius: radius,\n          ),\n          Positioned(\n            right: -2,\n            bottom: -2,\n            child: Icon(\n              Icons.camera_alt,\n              size: 38,\n              color: Theme.of(context).colorScheme.secondary,\n            ),\n          ),\n          if (progress != 0)\n            ClipRRect(\n              borderRadius: BorderRadius.circular(radius),\n              child: Container(\n                width: 120,\n                height: 120,\n                color: Colors.black.withOpacity(0.5),\n                child: Center(\n                  child: Text(\n                    '${(progress * 100).toInt()}%',\n                    style: const TextStyle(\n                      color: Colors.white,\n                      fontSize: 20,\n                    ),\n                  ),\n                ),\n              ),\n            ),\n        ],\n      ),\n    );\n  }\n}\n</code></pre>"},{"location":"developer_guideline/#chat","title":"Chat","text":""},{"location":"developer_guideline/#chat-setup","title":"Chat Setup","text":"<ul> <li>To allow only verified users send message, do the following;</li> </ul> <pre><code>ChatService.instance.setVerifiedUserOnly(true);\n</code></pre>"},{"location":"developer_guideline/#displaying-a-chat-message-of-a-chat-room","title":"Displaying a chat message of a chat room","text":"<p>To display a chat room message list, use <code>ChatMessageListView(uidOrRoomId: ...)</code>. Pass the other user's UID for a 1:1 chat, or the chat room ID if available. The chat room ID can represent either a 1:1 chat or a group chat.</p> <pre><code>ChatMessageListView(uidOrRoomId: '-O7NWCPZH3go57WNDzYn')\n</code></pre> <p>You can add an event handler when the user's profile photo is being tapped on the chat message bubble. The example below opens a user's public profile when the user's profile photo is tapped.</p> <pre><code>ChatMessageListView(\n  uidOrRoomId: widget.uidOrRoomId,\n  onTapProfilePhoto: (uid, displayName, photoUrl) =&gt;\n      showGeneralDialog(\n          context: context,\n          pageBuilder: (_, __, ___) =&gt; PublicProfileScreen(\n                uid: uid,\n                displayName: displayName,\n                photoUrl: photoUrl,\n              )),\n),\n</code></pre>"},{"location":"developer_guideline/#displaying-a-chat-room-screen-with-the-chat-message-list-view-and-chat-input-box","title":"Displaying a chat room screen with the chat message list view and chat input box","text":"<p>To display a chat room screen, you will need to display the chat room message list view and the chat room input box.</p> <pre><code>class ChatRoomScreen extends StatefulWidget {\n  static const String routeName = '/ChatRoom';\n  const ChatRoomScreen({super.key, required this.uidOrRoomId});\n  final String uidOrRoomId;\n\n  @override\n  State&lt;ChatRoomScreen&gt; createState() =&gt; _ChatRoomScreenState();\n}\n\nclass _ChatRoomScreenState extends State&lt;ChatRoomScreen&gt; {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('ChatRoom'),\n      ),\n      body: Column(\n        children: [\n          Expanded(\n            child: Padding(\n              padding: const EdgeInsets.fromLTRB(8, 0, 8, 0),\n              child: ChatMessageListView(uidOrRoomId: widget.uidOrRoomId),\n            ),\n          ),\n          ChatMessageInput(uidOrRoomId: widget.uidOrRoomId),\n        ],\n      ),\n    );\n  }\n}\n</code></pre> <p>Below is the chat message input widget with photo upload.</p> <pre><code>import 'package:cached_network_image/cached_network_image.dart';\nimport 'package:easy_storage/easy_storage.dart';\nimport 'package:flutter/material.dart';\nimport 'package:super_library/custom_code/actions/index.dart';\nimport 'package:super_library/custom_code/actions/super_library.dart';\n\nclass ChatMessageInput extends StatefulWidget {\n  const ChatMessageInput({\n    super.key,\n    required this.uidOrRoomId,\n  });\n\n  final String uidOrRoomId;\n\n  @override\n  State&lt;ChatMessageInput&gt; createState() =&gt; _ChatMessageInputState();\n}\n\nclass _ChatMessageInputState extends State&lt;ChatMessageInput&gt; {\n  final TextEditingController messageController = TextEditingController();\n  String? url;\n  @override\n  Widget build(BuildContext context) {\n    return Column(\n      crossAxisAlignment: CrossAxisAlignment.end,\n      children: [\n        if (url != null)\n          Container(\n            width: 200,\n            padding: const EdgeInsets.only(bottom: 8),\n            decoration: BoxDecoration(\n              color: Theme.of(context).colorScheme.surface,\n            ),\n            child: CachedNetworkImage(imageUrl: url!),\n          ),\n        SafeArea(\n          top: false,\n          child: Padding(\n            padding: EdgeInsets.only(\n              bottom: MediaQuery.viewPaddingOf(context).bottom &gt; 0 ? 0 : 8,\n            ),\n            child: Container(\n              margin: const EdgeInsets.fromLTRB(8, 0, 8, 0),\n              padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),\n              decoration: BoxDecoration(\n                border: Border.all(\n                  color: Theme.of(context).colorScheme.outline,\n                  width: 1.4,\n                ),\n                borderRadius: BorderRadius.circular(18),\n              ),\n              child: Row(\n                children: [\n                  UploadIconButton.image(onBeginUpload: () async {\n                    if (ChatService.instance.verifiedUserOnly) {\n                      if (UserService.instance.isVerified == false) {\n                        snackbar(\n                          context,\n                          '(verified-user-only) '\n                          'Only verified user can send a message',\n                          error: true,\n                        );\n                        return false;\n                      }\n                    }\n                  }, onUpload: (url) {\n                    this.url = url;\n                    setState(() {});\n                  }),\n                  Expanded(\n                    child: TextField(\n                        controller: messageController,\n                        decoration: const InputDecoration(\n                          hintText: 'Input message',\n                          border: InputBorder.none,\n                        ),\n                        onSubmitted: (value) =&gt; sendMessage()),\n                  ),\n                  IconButton(\n                    onPressed: sendMessage,\n                    icon: const Icon(Icons.send),\n                  ),\n                ],\n              ),\n            ),\n          ),\n        ),\n      ],\n    );\n  }\n\n  sendMessage() async {\n    final text = messageController.text;\n    final uploadedUrl = url;\n    setState(() {\n      url = null;\n    });\n    messageController.clear();\n    sendChatMessage(context, widget.uidOrRoomId, text, uploadedUrl, () {});\n  }\n}\n</code></pre>"},{"location":"developer_guideline/#handling-error-on-sending-a-chat-message","title":"Handling error on sending a chat message","text":"<ul> <li>Sending chat message may produce an error. You can catch error message like below and handle it in anyway you want.</li> </ul> <pre><code>sendChatMessage(context, widget.uidOrRoomId, text, uploadedUrl,\n    (message) async {\n  if (message.contains('verified-user-only')) {\n    final re = await confirm(\n      context: context,\n      title: const Text('User Verification Required'),\n      message: const Text(\n          'You need to verify yourself to send a message.\\n\\nDo you want to verify now?'),\n    );\n    if (re == true) {\n      if (mounted) {\n        showGeneralDialog(\n          context: context,\n          pageBuilder: (_, __, ___) {\n            return const VerificationScreen();\n          },\n        );\n      }\n    }\n  } else {\n    snackbar(context, message, error: true);\n  }\n});\n</code></pre>"},{"location":"developer_guideline/#to-display-open-chat-room-list","title":"To display open chat room list","text":"<pre><code>class OpenChatRoomListScreen extends StatefulWidget {\n  const OpenChatRoomListScreen({super.key});\n\n  @override\n  State&lt;OpenChatRoomListScreen&gt; createState() =&gt; _OpenChatRoomListScreenState();\n}\n\nclass _OpenChatRoomListScreenState extends State&lt;OpenChatRoomListScreen&gt; {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('OpenChatRoomList'),\n      ),\n      body: OpenChatRoomListView(\n        onTap: (roomId) =&gt; showGeneralDialog(\n          context: context,\n          pageBuilder: (_, __, ___) {\n            return ChatRoomScreen(uidOrRoomId: roomId);\n          },\n        ),\n      ),\n    );\n  }\n}\n</code></pre>"},{"location":"developer_guideline/#to-display-my-chat-room-list","title":"To display my chat room list","text":"<p>To display the chat room list, you can show it on the chat room list screen or include it within an IndexedStack on the home screen.</p> <pre><code>ChatRoomListView(\n  onTap: (roomId) =&gt; showGeneralDialog(\n    context: context,\n    pageBuilder: (_, __, ___) {\n      return ChatRoomScreen(uidOrRoomId: roomId);\n    },\n  ),\n),\n</code></pre>"},{"location":"developer_guideline/#to-display-chat-input-message-box-based-on-the-user-login-status","title":"To display chat input message box based on the user login status","text":"<ul> <li>Use <code>MyDoc</code> to display fake chat input message widget if the user is not logged in.</li> </ul> <pre><code>MyDoc(\n  builder: (user) =&gt; user == null\n      ? const FakeChatMessageInput()\n      : const ChatMessageInput(uidOrRoomId: '-O7NWCPZH3go57WNDzYn'),\n),\n</code></pre> <p>Example of <code>FakeChatMessageInput</code> widget</p> <pre><code>import 'package:flutter/material.dart';\nimport 'package:philov/screens/user/login.screen.dart';\n\nclass FakeChatMessageInput extends StatelessWidget {\n  const FakeChatMessageInput({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return GestureDetector(\n      behavior: HitTestBehavior.opaque,\n      onTap: () {\n        showGeneralDialog(\n          context: context,\n          pageBuilder: (_, __, ___) =&gt; const LoginScreen(),\n        );\n      },\n      child: SafeArea(\n        top: false,\n        child: Padding(\n          padding: EdgeInsets.only(\n            bottom: MediaQuery.viewPaddingOf(context).bottom &gt; 0 ? 0 : 8,\n          ),\n          child: Container(\n            margin: const EdgeInsets.fromLTRB(16, 0, 16, 0),\n            padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),\n            decoration: BoxDecoration(\n              border: Border.all(\n                color: Theme.of(context).colorScheme.outline,\n                width: 1.4,\n              ),\n              borderRadius: BorderRadius.circular(18),\n            ),\n            child: const Padding(\n              padding: EdgeInsets.all(10.0),\n              child: Row(\n                children: [\n                  Icon(Icons.camera_alt),\n                  SizedBox(width: 8),\n                  Expanded(\n                    child: Text(\n                      'Input message',\n                    ),\n                  ),\n                  Icon(Icons.send),\n                ],\n              ),\n            ),\n          ),\n        ),\n      ),\n    );\n  }\n}\n</code></pre>"},{"location":"developer_guideline/#creating-chat-room-with-chat-room-id","title":"Creating chat room with chat room ID","text":"<p>It is recommended to use the <code>createChatRoom</code> function to create a chat room. But if you are source coding with Flutter, you can use the <code>ChatRoom.create</code> method to create a chat room. With <code>ChatRoom.create</code>, you can set a chat room id.</p> <p>Example:</p> <pre><code>ChatRoom.create(\n  id: '-ChatRoomID',\n  name: 'All Chat Room',\n  description: 'Everyone can chat here',\n  iconUrl: null,\n  group: true,\n  open: true,\n  single: false,\n  allMembersCanInvite: true,\n);\n</code></pre> <p>Use case:</p> <ul> <li>When you have accidentally deleted the chat room, you can recover the chat room.</li> </ul>"},{"location":"developer_guideline/#upload","title":"Upload","text":"<ul> <li> <p><code>UploadStorage</code> provides a way of uploading files into Firebase Stroage service.</p> </li> <li> <p><code>Upload</code> widget provides a UI and Logic to upload files.</p> </li> <li> <p><code>Upload.image</code></p> </li> <li><code>Upload.file</code></li> <li> <p><code>Upload.video</code></p> </li> <li> <p>Below is an example of custom UI</p> </li> </ul> <p>Example:</p> <pre><code>Upload.image(\n  onUpload: (url) async {\n    print('url: $url');\n    await myDoc.update({'idCardUrl': url});\n    // widget.onUpdate(VerificationStep.socialLogin);\n  },\n  child: Column(\n    children: [\n      Container(\n        width: 360,\n        height: 200,\n        decoration: BoxDecoration(\n          color: Theme.of(context).colorScheme.secondary,\n        ),\n        child: MyDoc(builder: (data) {\n          print(data);\n          if (data?['idCardUrl'] != null) {\n            return CachedNetworkImage(\n              imageUrl: data!['idCardUrl'],\n              width: 360,\n              height: 200,\n              fit: BoxFit.cover,\n            );\n          }\n          return const IdCard();\n        }),\n      ),\n      spaceMd,\n      MyDoc(builder: (my) {\n        return Row(\n          mainAxisAlignment: MainAxisAlignment.spaceEvenly,\n          children: [\n            const Row(\n              children: [\n                Icon(Icons.camera_alt),\n                SizedBox(width: 8),\n                Text('Take a photo'),\n              ],\n            ),\n            if (my?['idCardUrl'] != null)\n              IconButton(\n                onPressed: () async {\n                  await UploadService.instance.delete(my!['idCardUrl']);\n\n                  await myDoc\n                      .update({'idCardUrl': FieldValue.delete()});\n                },\n                icon: const Icon(\n                  Icons.delete,\n                ),\n              ),\n          ],\n        );\n      }),\n    ],\n  ),\n),\n</code></pre> <ul> <li>Below is an example of uploading user avatar</li> </ul> <p>Eaxmaple:</p> <pre><code>import 'package:flutter/material.dart';\nimport 'package:super_library/custom_code/actions/super_library.dart';\nimport 'package:super_library/custom_code/widgets/index.dart';\n\nclass UserAvatarUpdate extends StatefulWidget {\n  const UserAvatarUpdate({\n    super.key,\n    this.photoGallery = true,\n  });\n\n  final bool photoGallery;\n  @override\n  State&lt;UserAvatarUpdate&gt; createState() =&gt; _UserAvatarUpdateState();\n}\n\nclass _UserAvatarUpdateState extends State&lt;UserAvatarUpdate&gt; {\n  double progress = 0;\n  final double radius = 50;\n  @override\n  Widget build(BuildContext context) {\n    return Upload.image(\n      photoGallery: widget.photoGallery,\n      onUpload: (url) async {\n        print('photo url: $url');\n        await UserService.instance.updateProfile(photoUrl: url);\n        setState(() {\n          progress = 0;\n        });\n      },\n      progress: (p) =&gt; setState(() =&gt; progress = p),\n      child: Stack(\n        clipBehavior: Clip.none,\n        children: [\n          UserAvatar(\n            uid: myUid,\n            width: 120,\n            height: 120,\n            radius: radius,\n          ),\n          Positioned(\n            right: -2,\n            bottom: -2,\n            child: Icon(\n              Icons.camera_alt,\n              size: 38,\n              color: Theme.of(context).colorScheme.secondary,\n            ),\n          ),\n          if (progress &gt; 0 &amp;&amp; progress &lt;= 1)\n            ClipRRect(\n              borderRadius: BorderRadius.circular(radius),\n              child: Container(\n                width: 120,\n                height: 120,\n                color: Colors.black.withOpacity(0.5),\n                child: Center(\n                  child: Text(\n                    '${((progress) * 100).toInt()}%',\n                    style: const TextStyle(\n                      color: Colors.white,\n                      fontSize: 20,\n                    ),\n                  ),\n                ),\n              ),\n            ),\n        ],\n      ),\n    );\n  }\n}\n</code></pre>"},{"location":"developer_guideline/#uploadimage","title":"UploadImage","text":"<ul> <li>While you may enjoy using <code>Upload.image</code>, you can use <code>UploadImage</code> with pre-defined UI/UX.</li> </ul> <pre><code>UploadImage(\n  onUpload: (url) =&gt; setState(() =&gt; iconUrl = url),\n),\n</code></pre>"},{"location":"developer_guideline/#feed-api","title":"Feed API","text":"<p>In this chapter, the Feed functionality is explained. If you are using FlutterFlow without source coding, please refer Feed API document.</p>"},{"location":"developer_guideline/#database-structure","title":"Database Structure","text":"<p><code>/follow/feed/$uid/$dataKey</code></p> <pre><code>/follow\n    /feed {\n      \"$uid\": {\n          \"$dataKey\": {\n              \"content\": \"...\",\n              \"createdAt\": \"...\",\n              \"displayName\": \"...\",\n              \"photoUrl\": \"...\",\n              \"uid\": \"...\",\n              \"updatedAt\": \"...\",\n          },\n      },\n    }\n</code></pre> <p><code>/follow/whoFollowMe/$myUid/$otherUid</code></p> <pre><code>/follow\n    /whoFollowMe {\n      \"$myUid\": {\n          \"$otherUid\": true\n      },\n    }\n</code></pre> <p><code>/follow/whoIFollow/$otherUid/$myUid</code></p> <pre><code>/follow\n    /whoFollowMe {\n      \"$myUid\": {\n          \"$otherUid\": true\n      },\n    }\n</code></pre>"},{"location":"features/","title":"Features","text":"<p>The Super Library offers comprehensive features for social apps like chat or forums:</p> <ul> <li>Scalability: Uses the Realtime Database for maximum scalability.</li> <li>User Management:<ul> <li>User data CRUD (Create, Read, Update, Delete)</li> <li>User search</li> <li>Public profiles</li> </ul> </li> <li>Social Features: <ul> <li>Like</li> <li>Block</li> <li>Report</li> </ul> </li> <li>Chat Features: Complete chat functionality.</li> <li>Forum/Blog Features: Complete forum and blog functionality.</li> </ul>"},{"location":"feed_api/","title":"Feed API","text":"<p>In this document, the feed functionality for FlutterFlow is explained. If you want to work with the source coding, please refer the Feed API in Developer Guideline.</p>"},{"location":"feed_api/#features","title":"Features","text":"<p>Feed API allows you to follow and unfollow users. It also gives you an option to get who follow you and who you follow.</p> <ul> <li>isFollowing: Custom action to check if you are following the other user.</li> <li>follow: Custom action to follow other user.</li> <li> <p>unfollow: Custom action to unfollow other user you are following.</p> </li> <li> <p>getWhoFollowMe: Custom action to get a list of users who follow me.</p> </li> <li>getWhoIFollow: Custom action to get a list of users who I follow.</li> <li>createFeed: Custom action to create a feed.</li> <li>updateFeed: Custom action to update a feed.</li> <li>deleteFeed: Custom action to delete a feed.</li> </ul>"},{"location":"feed_api/#suggested-use-case","title":"Suggested Use Case","text":"<ul> <li>Showing the feeds of the other users that the current user is following.</li> <li>Showing a button to follow/unfollow the other user.</li> <li>Display who follow the user and who the user follows.</li> <li>Create Feed after a Data is created.</li> <li>Update Feed after a Data is updated.</li> <li>Delete Feed after a Data is deleted.</li> </ul>"},{"location":"feed_api/#how-to-use-follow-unfollow-and-isfollowing-custom-actions","title":"How to use follow, unfollow and isFollowing custom actions","text":"<ul> <li>Create a screen named <code>PublicProfileScreen</code>.</li> <li>Create a Local page state variable and named it as <code>isFollowing</code> with <code>Boolean</code> as type.</li> </ul> <ul> <li> <p>Under the page <code>On Page Load</code> trigger add the <code>isFollowing</code> custom action.</p> </li> <li> <p>otherUid: Pass the uid of the other user.</p> </li> <li> <p>callback: This callback will return boolean if you follow or not the other user.</p> <p></p> </li> <li> <p>Inside the <code>callback</code> action, add an action that will update the local page state variable <code>isFollowing</code> with the return value.</p> <p></p> </li> <li> <p>Next, add a button on the screen and name it as <code>FollowButton</code> change the text to <code>Follow</code>.</p> </li> <li> <p>Select <code>FollowButton</code> widget and under the widget property panel add the custom action <code>follow</code> .</p> <ul> <li>otherUid: Input the other user uid.</li> <li>onFollow: This callback will be called if no error on follow action.</li> <li>onFailure: This callback will trigger if theres any error on the action with an error message.</li> </ul> <p></p> </li> </ul> <p>e.g. onFollow</p> <ul> <li>(Optional) Show a snack message success follow.</li> <li> <p>Set the local page state variable <code>isFollowing</code> to true.</p> <p></p> </li> </ul> <p>e.g. onFailure Show a snack message with the error message..</p> <p></p> <ul> <li> <p>Next, Add a button on the screen and name it <code>UnfollowButton</code> change the text to <code>Unfollow</code>.</p> </li> <li> <p>Select <code>UnfollowButton</code> widget and under the widget property panel add and action and select the custom action <code>unfollow</code>.</p> <ul> <li>otherUid: Input the other user uid.</li> <li>onUnfollow: This callback will be called if no error on unfollow action.</li> <li>onFailure: This callback will trigger if theres any error on the action with an error message.</li> </ul> <p></p> </li> </ul> <p>e.g. onUnfollow</p> <ul> <li>(Optional) Show a snack message success unfollow.</li> <li>Set the local page state variable <code>isFollowing</code> to false.</li> </ul> <p></p> <p>e.g. onFailure Show a snack message with the error message.</p> <p></p> <ul> <li>Lastly, to show only the button that is needed. we will wrap this two button with contidinal widget. and the select the isFollowing local state for the condition.</li> </ul> <p></p> <ul> <li>And the widget tree will look like below.</li> </ul> <p></p> <ul> <li>Run the app and it should toggle from Follow to Unfollow when the button is clicked.</li> </ul>"},{"location":"feed_api/#how-to-display-users-who-follow-me","title":"How to display users who follow me","text":"<ul> <li>Create a new screen named <code>WhoFollowMeScreen</code>.</li> <li> <p>Get the List of users who follow me using the <code>getWhoFollowMe</code> custom action.</p> </li> <li> <p>First select the page and add an action <code>On Page Load</code> trigger, then add the <code>getWhoFollowMe</code> custom action and set the <code>Action Output Variable Name</code> e.g <code>getWhoFollowMeOutput</code>.</p> <p></p> </li> <li> <p>Then rebuild the current page once the data is loaded. We add another action <code>Update Page State</code> no need to set any field, just change the <code>Update Type</code> to <code>Rebuild Current Page</code>.</p> <p></p> </li> <li> <p>Sample Setup to display the users who follow me.</p> </li> <li> <p>On the widget tree add a <code>Row Widget</code> or <code>Column Widget</code>, in this case we will use a <code>Row Widget</code>.</p> </li> <li>Inside the <code>Row widget</code> add a <code>Column Widget</code>.</li> <li>Inside the <code>Column Widget</code> add the <code>UserAvatarComponent</code> and <code>UserDisplayNameComponent</code>.</li> <li> <p>Your Widget Tree will look like below.</p> <p></p> </li> <li> <p>Important! To avoid null error, first we need to check if the <code>getWhoFollowMeOutput</code> Action output has value. You can either hide the row when the output is not set or you can wrap the row with conditional widget and display empty message if the output is not set or empty.</p> </li> <li> <p>In this example we will just hide the Row if the output is not set.</p> </li> <li> <p>First Select the <code>Row Widget</code>,</p> </li> <li> <p>Under the widget properties, enable the visibility set the condition by navigating to action output, select <code>getWhoFollowMeOutput</code> and from the available option select <code>Is Set and Not Empty</code> and confirm.</p> <p></p> </li> <li> <p>Next to use the <code>getWhoFollowMeOutput</code> action output, on the Property Panel click the 4th Tab (Generate Dynamic Children tab).</p> </li> <li>Input Variable Name. e.g. <code>whoFollowMe</code></li> <li>Next set the <code>Value</code> by Navigating to <code>Action Outputs</code> and in the Available Options select the <code>getWhoFollowMeOutput</code> that we set from the <code>On Page Load</code> trigger and click confirm.</li> </ul> <p></p> <ul> <li>Then click <code>Save</code>, this will promt that this action will generate its children dynamically and click <code>Ok</code>.</li> </ul> <p></p> <ul> <li>Now we can use the <code>whoFollowMe</code> variable inside the UserAvatarComponent and UserDisplayNameComponent.</li> <li> <p>Select the <code>UserAvatarComponent</code> from the widget tree</p> </li> <li> <p>Set the variable for the <code>uid</code>, select the <code>whoFollowMe Item</code> from the source.</p> <p></p> </li> <li> <p>First Available Options select <code>JSON Path</code>.</p> </li> <li>For the JSON Path input <code>$.uid</code>.</li> <li> <p>Then on the next Available Options select <code>No Further Changes</code>.</p> <p></p> </li> <li> <p>Do the same with the <code>UserDisplayNameComponent</code>.</p> </li> </ul> <p></p> <ul> <li>Your canvas should look like this. Run the app and if you have followers, then it should display the avatar and display name of the followers.</li> </ul> <p></p>"},{"location":"feed_api/#how-to-display-users-who-i-follow","title":"How to display users who I follow","text":"<ul> <li>Create another screen named <code>WhoIFollowScreen</code>.</li> <li> <p>Get the List of users who I follow using the <code>getWhoIFollow</code> custom action.</p> </li> <li> <p>Select the page then add an action <code>On Page Load</code> trigger, then add the <code>getWhoIFollow</code> custom action and set the <code>Action Output Variable Name</code> e.g <code>getWhoIFollowOutput</code>.</p> <p></p> </li> <li> <p>Then rebuild the current page once the data is loaded. We add another action <code>Update Page State</code> no need to set any field, just change the <code>Update Type</code> to <code>Rebuild Current Page</code>.</p> <p></p> </li> <li> <p>Sample Setup to display the users who I follow.</p> </li> <li> <p>This time we will use <code>Column Widget</code>, since newly created screen has <code>Column Widget</code> we dont need to add anymore.</p> </li> <li>Inside the <code>Column Widget</code>, add a <code>Row Widget</code>.</li> <li>Then inside the <code>Row Widget</code> add the <code>UserAvatarComponent</code> and <code>UserDisplayNameComponent</code>.</li> <li> <p>Your Widget Tree will look like below.</p> <p></p> </li> <li> <p>Important! To avoid null error, first we need to check if the <code>getWhoIFollowOutput</code> Action output has value. You can either hide the Column when the output is not set or you can wrap the Column with conditional widget and display empty message if the output is not set or empty.</p> </li> <li> <p>First Select the <code>Column Widget</code></p> </li> <li> <p>Under the widget properties, enable the visibility set the condition by navigating to action output, select <code>getWhoIFollowOutput</code> and from the available option select <code>Is Set and Not Empty</code> and confirm.</p> </li> </ul> <p></p> <ul> <li>Next to use the <code>getWhoIFollowOutput</code> action output, on the Property Panel click the 4th Tab (Generate Dynamic Children tab).</li> <li>Input Variable Name. e.g. <code>whoIFollow</code></li> <li> <p>Next set the <code>Value</code> by Navigating to <code>Action Outputs</code> and in the Available Options select the <code>getWhoIFollowOutput</code> that we set from the <code>On Page Load</code> trigger and click confirm.</p> </li> <li> <p>Then click <code>Save</code>, this will promt that this action will generate its children dynamically and click <code>Ok</code>.</p> </li> </ul> <p></p> <ul> <li> <p>Now we can use the <code>whoIFollow</code> variable inside the UserAvatarComponent and UserDisplayNameComponent.</p> </li> <li> <p>Select the <code>UserAvatarComponent</code> from the widget tree</p> </li> <li> <p>Set the variable for the <code>uid</code>, select the <code>whoFollowMe Item</code> from the source.</p> <p></p> </li> <li> <p>First Available Options select <code>No Further Changes</code> then confirm.</p> <p></p> </li> <li> <p>Do the same with the <code>UserDisplayNameComponent</code>.</p> </li> </ul> <p></p> <ul> <li>Your canvas should look like this. Run the app and if you have followers, then it should display the avatar and display name of the followers.</li> </ul> <p></p>"},{"location":"feed_api/#how-to-use-createfeed","title":"How to use createFeed","text":"<p>Feed is often use after a data was created. e.g. A user post a data, then we create the feed of this user followers using the information from the data.</p> <p>Created feeds will have the following fields and will be added to followers feed of the current user:</p> <p>/follow/feed/$otherUid/$dataKey</p> <pre><code>/follow\n    /feed\n        /$otherUid\n            /$dataKey\n                {\n                    \"content\": \"data content\",\n                    \"createdAt\": \"data createdAt\",\n                    \"displayName\": \"Author display name\",\n                    \"photoUrl\": \"Author photo url\",\n                    \"uid\": \"Author uid\",\n                    \"urls\": [\"data urls\",],\n                    \"updatedAt\": \"data updatedAt\"\n                }\n</code></pre> <ul> <li>After a <code>Data</code> is created using <code>createData</code> Custom Action. It will call the <code>onCreate</code> callback that has the <code>key</code> of Data that was created. (To know more about <code>createData</code> refer to createData)</li> </ul> <p></p> <ul> <li>Inside the <code>onCreate</code> callback we will read the Data first by adding the Custom Action <code>readData</code> and passing the <code>key</code> from the callback parameter into the key input parameter.</li> </ul> <p></p> <ul> <li>Then we name the Action Output Variable Name e.g. <code>readDataOutput</code>. (To know more about <code>readData</code> refer to readData)</li> </ul> <p></p> <ul> <li>After reading the Data we can pass the Action Output <code>readDataOutput</code> to create feed to followers using the <code>createFeed</code> Custom Action.</li> </ul> <p></p>"},{"location":"feed_api/#how-to-use-updatefeed","title":"How to use updateFeed","text":"<p>Feed is often use after a data was updated. e.g. A user edit a data, and we update the feed of this user followers.</p> <ul> <li>After a <code>Data</code> is updated using <code>updateData</code> Custom Action. It will call the <code>onUpdate</code> callback that has the <code>key</code> of Data that was updated. (To know more about <code>updateData</code> refer to updateData)</li> </ul> <p></p> <ul> <li>Inside the <code>onUpdate</code> callback we will read the Data first by adding the Custom Action <code>readData</code> and pass the same <code>dataKey</code> to the key input parameter. And named the Action Output Variable Name e.g. <code>readDataForFeedUpdate</code></li> </ul> <p></p> <ul> <li>After reading the Data we can pass the Action Output <code>readDataForFeedUpdate</code> to update the followers feed using the <code>updateFeed</code> Custom Action.</li> </ul> <p></p>"},{"location":"feed_api/#how-to-use-deletefeed","title":"How to use deleteFeed","text":"<p>delete field requires $dataKey</p>"},{"location":"feed_api/#how-to-list-feeds","title":"How to list feeds","text":""},{"location":"known_issues/","title":"Known Issues","text":""},{"location":"known_issues/#chat-room-name-update-delay","title":"Chat Room Name Update Delay","text":""},{"location":"known_issues/#issue","title":"Issue","text":"<p>When a master edits the chat room name, the change does not take effect immediately. The updated name only appears after a new message is sent in the chat room.</p>"},{"location":"known_issues/#impact","title":"Impact","text":"<p>This is not a critical error, but it can be confusing for users expecting an immediate update.</p>"},{"location":"known_issues/#workaround","title":"Workaround","text":"<p>Masters can send a message in the chat room right after changing the name to force the update.</p>"},{"location":"known_issues/#resolution","title":"Resolution","text":"<p>We are aware of this issue and plan to fix it in a future update.</p>"},{"location":"known_issues/#error-on-running-the-app-in-flutterflow","title":"Error on running the app in FlutterFlow","text":""},{"location":"known_issues/#build-fail-error","title":"Build fail error","text":"<p>If you encounter a build failure error message similar to the one below which includes <code>xxx packages has newer version...</code>, try re-running the app in FlutterFlow. A simple re-start has worked for us.</p> <p></p>"},{"location":"localization/","title":"Localization","text":"<p>Super library simply follows the way how the FlutterFlow localizes.</p> <p>If you want to add custom translations, you can add the translation with <code>LocaleService.instance.add()</code>.</p> <p>Refere Developer's Tip - Localization</p>"},{"location":"push_notifications/","title":"Push notifications","text":"<p>The default behavior of FlutterFlow when it send push notifications is to read and write documents in the Firestore.</p> <p>If your app has a group chat with active 1,000 users, and the app delivers push notifications on each chat, the app will create a document on each push notification and read more than 1,000 document of tokens. Yes, that's for every chat message. If your app has multiple active gruop chats, it will cost more.</p> <p>We have our custom push notifications cloud functions. That works very much the same as the one provided by FlutterFlow. But it uses the Realtime Database. It will not cost anything by read/write.</p> <p>You can simply copy and paste it into the Cloud functions menu and deploy.</p> <p>The cloud functions will send messages by listening to the events of new chat message, comments, likes, and more.</p>"},{"location":"push_notifications/#installation","title":"Installation","text":"<ul> <li>You need to install a few cloud functions from your FlutterFlow dashboard.</li> </ul>"},{"location":"push_notifications/#mirrorfcmtokens","title":"mirrorFcmTokens","text":"<ul> <li>Create a new cloud function from your Cloud Functions in FlutterFlow</li> <li>Change the cloud function name as <code>mirrorFcmTokens</code></li> <li>Copy the source code of mirrorFcmTokens</li> <li>Replace the source code with the copy</li> <li>Deploy</li> </ul>"},{"location":"push_notifications/#pushnotificationonchatmessage","title":"pushNotificationOnChatMessage","text":"<ul> <li>Create a new cloud function from your Cloud Functions in FlutterFlow</li> <li>Change the cloud function name as <code>pushNotificationOnChatMessage</code></li> <li>Copy the source code of super library send push notification</li> <li>Replace the source code with the copy</li> <li>Deploy</li> </ul>"},{"location":"push_notifications/#how-flutterflow-works-with-chat-push-notifications","title":"How FlutterFlow works with chat push notifications","text":"<ul> <li>In FlutterFlow, every screen(page) is listening the tap event of the push notification banner. The paths of the push notification handler would be</li> <li><code>main.dart</code> calls <code>_router = createRouter(_appStateNotifier);</code> inside <code>MyApp</code>.<ul> <li><code>nav.dart</code> creates FFRoute objects of all the screens(pages) and passes it to <code>toRouter</code> as in <code>.map((r) =&gt; r.toRoute(appStateNotifier))</code></li> <li>In <code>nav.dart</code>, the <code>toRoute</code> wraps the the FFRoute screen object with <code>GoRouter</code> and handle the async/await if the screne is Future. And it also handles the parameters of the screen(page)<ul> <li>Then, the <code>toRoute</code> passes the screen(of GoRouter) as the child parameter of the <code>PushNotificationsHandler</code> widget.</li> <li>The <code>PushNotificationsHandler</code> is a stateful widget that has push notification handler in its initState, and simply returns the child (screen/page) widget.<ul> <li>See? every screen is wrapped by <code>PushNotificationsHandler</code> widget that does push notification handling.</li> <li>Not that, the push notification handler will extract the <code>initialPageName</code> and <code>parameterData</code> inside the push notification <code>data</code> property.</li> <li>Then, it will open the screen(page) that is identical to <code>initialPageName</code> and transform the <code>parameterData</code> to pass over the go router's <code>context.pushNamed(...)</code> method to pass over the <code>initialPageName</code>.</li> </ul> </li> </ul> </li> </ul> </li> </ul> <pre><code>const parameterData = JSON.stringify({ roomId, messageId });\nconst initialPageName = \"ChatRoomScreen\"; // The name of the screen you will open.\n</code></pre>"},{"location":"push_notifications/#pushnotificationondata","title":"pushNotificationOnData","text":"<ul> <li>Do the same as <code>pushNotificationOnChatMessage</code> except changing the cloud function name to <code>pushNotificationOnData</code>.</li> </ul>"},{"location":"push_notifications/#how-flutterflow-works-with-data-push-notifications","title":"How FlutterFlow works with data push notifications","text":"<ul> <li>When the user taps on the push notification banner on the system tray, it will open <code>DataDetailScreen</code> with the <code>category</code> and <code>dataKey</code> parameters.</li> <li>You may not have a screen named <code>DataDetailScreen</code>. Instead you may have <code>PostDetailScreen</code> and <code>BlogDetailScreen</code> for data view screen.<ul> <li>In this case, you need to create a screen named <code>DataDetailScreen</code> and when user taps on the push notification banner, the app will open the <code>DataDetailScreen</code> with parameters of <code>category</code> adn <code>dataKey</code>.</li> <li>Then, look into the <code>category</code> parameter and decide to redirect any of the screens of <code>PostDetailsScreen</code> or <code>BlogDetailScreen</code>, or whatever screen. <pre><code>const parameterData = JSON.stringify({ category, dataKey });\nconst initialPageName = \"DataDetailScreen\"; // This page will be opened when the user taps on the push notification banner.\n</code></pre></li> </ul> </li> </ul>"},{"location":"push_notifications/#pushnotificationoncomment","title":"pushNotificationOnComment","text":"<ul> <li>Do the same as <code>pushNotificationOnChatMessage</code> except changing the cloud function name to <code>pushNotificationOnComment</code>.</li> </ul>"},{"location":"push_notifications/#database-structure","title":"Database structure","text":""},{"location":"push_notifications/#push-notification-tokens","title":"Push notification tokens","text":"<ul> <li>/mirrored-fcm-tokens: is the node that will have the tokens. The key is the token. And the value is the user uid. The push tokens are mirrored from the <code>/users/&lt;uid&gt;/fcm_tokens/</code> collection.</li> </ul>"},{"location":"push_notifications/#push-notification-subscriptions","title":"Push notification subscriptions","text":"<ul> <li><code>/fcm-subscriptions/&lt;group-id&gt;</code>: is the node that will save all the subscriptions.</li> <li> <p>The <code>group-id</code> can be a <code>category</code> of data group, a <code>chat room id</code>, or it can be somethign else.</p> </li> <li> <p>For the <code>category</code> of the data group, the uids of the users who subscribe for that category will be saved as a key and the value will be <code>true</code>.</p> </li> <li>If the category is <code>qna</code> and the user uid is <code>user-A</code>, then the data structure is like below.<ul> <li><code>/fcm-subscriptions/qna { user-A: true }</code></li> </ul> </li> <li> <p>You can provide an icon to turn on/off on each forum category. Or you can give a user of a subscription settings screen to manage the whole subscription options available in the app.</p> </li> <li> <p>For the chat room, the behavior of subscription of the chat room is reversed. Meaning, the user's uid is saved under the <code>/fcm-subscriptions/&lt;chat-room-id&gt;</code>, it means the user has unsubscribed the chat room. And when there is no uid saved under the subscription node, the subscription for the user is on.</p> <ul> <li>To achieve this,</li> <li>display the subscription icon on when there is no uid under the subscription path.</li> <li>Display the subscription icon off when there is uid under the subscription path.</li> <li>Send push notification (on every chat message) to those users (of the chat room) whose uid is NOT in the subscription path.</li> </ul> </li> <li> <p>For like of profile</p> </li> <li>Let each user to choose to get push notifications or not when somebody liked on his profile.</li> <li> <p>By default, it's on.</p> </li> <li> <p>For like of data</p> </li> <li>Let each user to choose to get push notifications or not when somebody liked on his data.</li> <li> <p>By default, it's on.</p> </li> <li> <p>For like of comment</p> </li> <li>Let each user to choose to get push notifications or not when somebody liked on his comment.</li> <li>By default, it's on.</li> </ul>"},{"location":"push_notifications/#push-notification-icon","title":"Push notification icon","text":"<p>Use <code>PushNotificationIcon</code> to display the subscription on/off.</p>"},{"location":"quick_start/","title":"Quick Start","text":"<p>To use the Super Library, you need to add initialization code.</p>"},{"location":"quick_start/#setup","title":"Setup","text":"<p>See the setup documnet.</p>"},{"location":"quick_start/#why-firebase-databsae-url-is-needed","title":"Why Firebase Databsae URL is Needed","text":"<p>Firebase Realtime Database requires the databaseURL option to run the web applications. If you are running your app in the web debug mode, then you will need the databaseURL setting.</p> <p>If you see an error message of <code>Exception: SuperLibrary.databaseURL is null</code> or <code>Cannot parse firebase url</code>, then, you may suspect that there is something wrong with the databaseURL in web running mode. Refer Trouble Shooting for more details.</p>"},{"location":"quick_start/#how-to-set-the-databaseurl","title":"How to set the databaseURL","text":"<ol> <li>Copy the URL of the Firebase Realtime Database. You can get it from Firebsae console.</li> <li>Paste the url into the <code>databaseURL</code> field in the <code>View Details</code> of the Project dependencies setting in FlutterFlow.</li> </ol> <p>If you are running in Mobile device like Simulator, Emulator, or physical device, you don't need to set up the <code>databaseURL</code>. The <code>databaseURL</code> is set by the FlutterFlow in the <code>google-service.json</code> and <code>GoogleService-Info.plist</code> files.</p>"},{"location":"quick_start/#adding-the-databaseurl-in-the-source-code","title":"Adding the databaseURL in the source code","text":"<p>If you are building apps with Flutter (Not using FlutterFlow), you can add the databaseURL like below;</p> <pre><code>SuperLibrary.instance.databaseURL = 'https://xxx-default-rtdb.firebaseio.com';\n</code></pre>"},{"location":"quick_start/#explanation","title":"Explanation","text":"<p>getDatabaseUrl: A callback function to return the database URL. It Supports environment variables, which are initialized after initApp is called. If not using environment variables, simply return the URL as a string.</p>"},{"location":"quick_start/#handling-errors","title":"Handling Errors","text":"<p>If you see an error like Target of URI doesn't exist: 'package:super_library/custom_code/actions/super_library.dart', run the app with \"Exclude from compilation\".</p>"},{"location":"quick_start/#adding-initapp-to-maindart","title":"Adding initApp to main.dart","text":"<p>Make sure to add the initApp custom action in your main.dart file.</p>"},{"location":"report/","title":"Reporting","text":"<p>Superlibrary provides custom actions to report users/chat message/chat room/ or any kinds of content.</p> <p>But the developer must list the report list using the FlutterFlow Backend Query.</p> <p>The blocked information is saved in Firestore.</p> <p>Firestore - database structure</p> <pre><code>/reports\n   /&lt;report-id&gt;\n     {\n        reporterUid:\n        reporteeUid:\n        createdAt:\n        reason:\n        summary:\n        id:\n        type:\n        order: \n     }\n</code></pre> <p>Based on the database structure, you can create any UI and UX.</p>"},{"location":"report/#how-to-report","title":"How to report","text":"<ul> <li> <p>Use report custom action to save the reporting instead of writing your own logic. You can save the reporting with your own Backend Query if you want.</p> </li> <li> <p>Don\u2019t ask the user to type anything. But let the user click(tap) one or two times. For instance, let the user choose one of the reasons: (1) Spam (2) Abusing (3) Bad content - instead of asking the user to type.</p> </li> <li> <p><code>summary</code> - is the summary of the content. If it is a post, add title and first part of the content. Don\u2019t ask the user to type anything to input a summary. </p> </li> <li> <p><code>type</code> - can be any type of data. It can be a user, chat, post, comment, photo, etc.</p> </li> <li><code>id</code> - is the id(or key) of the data(document key, photo url, etc) that you are reporting. This id goes together with the type. If the type is</li> <li><code>post</code>, then, this id will be the key of the post.</li> <li><code>user</code>, then this id will be the user\u2019s uid.</li> <li> <p>Note that the type and id  are used to track(connect) to the original data(content, document). For instance, if the type is chat-room then, the id is the chat room id. And in the admin\u2019s screen, the admin can destroy the chat room and block the master\u2019s account.</p> </li> <li> <p>Document ID will be generated like -type-id. <li>To check if the document exists, check if the document id exists.</li>"},{"location":"report/#how-to-check-if-the-same-content-has-been-reported","title":"How to check if the same content has been reported","text":"<ul> <li>Use reportExists custom action to check if the login user has already reported the same content.</li> <li>You can do this with your own Backend Query.</li> </ul>"},{"location":"report/#how-to-display-reports-for-the-login-user","title":"How to display reports for the login user","text":"<ul> <li>Backend query the reports collection with</li> <li>Order by <code>createdAt</code> to display all the reports</li> <li><code>type</code> and a type of post and with <code>createdAt</code></li> <li><code>reportee</code> for whom were reported with combination of type and createdAt</li> </ul>"},{"location":"report/#how-to-display-reports-for-the-admin","title":"How to Display Reports for the Admin","text":"<p>To display reports for the admin, perform a backend query on the reports collection using the following criteria:</p> <ol> <li> <p>Order by <code>createdAt</code>: Display all reports sorted by their creation date.</p> </li> <li> <p>Filter by <code>type</code>: Filter reports by the type of post and sort by <code>createdAt</code>.</p> </li> <li> <p>Filter by <code>reporter</code>:  Filter reports by the user who reported them, combined with <code>type</code> and <code>createdAt</code>.</p> </li> <li> <p>Filter by <code>reportee</code>: Filter reports by the user who was reported, combined with <code>type</code> and <code>createdAt</code>.</p> </li> </ol> <p>You can use any combination of the above fields to make the backend query.</p>"},{"location":"samples/","title":"Sample Projects","text":""},{"location":"samples/#flutterflow-sample-project","title":"FlutterFlow Sample Project","text":"<p>This project demonstrates how to use the Super Library in FlutterFlow. - View Project</p>"},{"location":"samples/#flutter-example-project","title":"Flutter Example Project","text":"<p>This project shows how to consume and test the Super Library in a Flutter app. - View on GitHub</p>"},{"location":"security_rules/","title":"Security Rules","text":""},{"location":"security_rules/#firestore","title":"Firestore","text":"<pre><code>    // By defualt, only the user can read his document.\n    match /users/{uid} {\n      allow read: if uid == request.auth.uid;\n      allow write: if uid == request.auth.uid;\n    }\n</code></pre>"},{"location":"security_rules/#realtime-database-security-rules","title":"Realtime Database Security Rules","text":"<pre><code>{\n  \"rules\": {\n    \"blocked-users\": {\n      \"$my_uid\": {\n        \"$other_uid\": {\n          \".read\": true,\n          \".write\": \"$my_uid === auth.uid\"\n        }\n      }\n    },\n  }\n}\n</code></pre>"},{"location":"setup/","title":"Setup","text":"<ul> <li> <p>Add the <code>super library</code> as library dependency.</p> </li> <li> <p>Set the <code>databaseURL</code> if you want to run the flutter flow project in web.</p> </li> <li> <p>Add the security rules as described in security rules document.</p> </li> <li> <p>Add the fields in user schema in the FlutterFlow Firestore setting</p> <ul> <li><code>blockedUsers</code>: List of String</li> <li><code>verified</code>: boolean</li> </ul> </li> </ul>"},{"location":"todo/","title":"TODOs","text":""},{"location":"todo/#default-icon-size-of-useravatar","title":"Default Icon size of UserAvatar","text":"<p>Right now, it's <code>width * .64</code>. But the widget cannot be delivered to the widget if it's encapsulated by a Component.</p>"},{"location":"todo/#chat-message-search","title":"Chat message search","text":"<ul> <li>Download all the chat mesesages for chat message search;</li> <li>Option 1; Download all of the chat messages of my chat rooms;</li> <li>Option 2; Download only the messages of a chat room to search text;</li> <li>Option 3; Download only the last 100,000 messages of a chat room to search text;</li> </ul>"},{"location":"trouble_shooting/","title":"Trouble Shooting","text":""},{"location":"trouble_shooting/#database-url-setup","title":"Database URL setup","text":"<p>If you see error messages like below;</p> <ul> <li><code>Exception: SuperLibrary.databaseURL is null</code></li> <li><code>Error: FIREBASE FATAL ERROR: Cannot parse Firebase url. Please use https://&lt;YOUR FIREBASE&gt;.firebaseio.com</code></li> </ul> <p>Then, you may suspect that there is something wrong with the databaseURL in web running mode.</p> <p>For mobile build and run, the database url setup is automatically done by the flutterflow. You will simply enable the database and then re-configure the firebase config files in FlutterFlow.</p>"},{"location":"user/","title":"User","text":"<ul> <li>User</li> <li>Overview</li> <li>User fields</li> <li>User Authentication</li> <li>UserAvatar</li> <li>DisplayName</li> <li>User List View</li> <li>Alternative Option</li> <li>Customizing the UI</li> <li>Horizontal Scrolling</li> <li>Examples</li> <li>How to Customize UI Design in UserListView</li> <li>Step 1: Create UserListIcon Component</li> <li>Step 2: Design UserListIcon Component</li> <li>Step 3: Create PublicProfileScreen</li> <li>Step 4: Add onTap Action to UserListIcon</li> <li>Step 5: Design PublicProfileScreen</li> <li>Different UI Design on Each Screen</li> <li>User Search</li> <li>Setting Up User Search</li> <li>Search Options</li> <li>Note</li> <li>Search Users by <code>display_name</code> (Case-Insensitive)</li> <li>Example Users</li> <li>Search Criteria</li> <li>Important Note</li> <li>Functions</li> <li>isAnonymous</li> <li>Blocking User</li> <li>Database structure for Blocking</li> <li>blocking a user</li> <li>Un-blocking a User</li> <li>Listing the blocked users</li> <li>Usage</li> <li>Displaying the block and unblock buttons</li> <li>To display the list of users that are blocked by login user</li> <li>Verification</li> <li>Widgets</li> <li>BlockedUser</li> <li>Security</li> </ul>"},{"location":"user/#overview","title":"Overview","text":"<ul> <li>The user's <code>display_name</code> and <code>photo_url</code> are mirrored from Firestore to the Realtime Database.</li> <li>The user's <code>display_name</code> is also stored in <code>display_name_lowercase</code> (in lowercase) for better searchability in both Firestore and the Realtime Database.</li> </ul>"},{"location":"user/#user-fields","title":"User fields","text":"<p>There are several predefined User schema fields in Flutterflwo. Super library needs more than those.</p> <ul> <li><code>display_name_lowercase</code>: String. It's the lower case of the <code>display_name</code></li> <li><code>blockedUsers</code>: List of String. It saves the uid of other users who the login user wants to block.</li> <li><code>idCardUrl</code>: Image path. If you want users to upload their own ID card, you can upload it on Storage and save the url here. And as you know, user document saves private information like email, phone number which should never reveal to the public. See verification for detail.</li> <li><code>verified</code>: bool</li> </ul>"},{"location":"user/#user-authentication","title":"User Authentication","text":"<p>The Super Library supports Firebase user authentication only.</p> <p>You can continue using FlutterFlow's authentication methods seamlessly with the Super Library.</p>"},{"location":"user/#useravatar","title":"UserAvatar","text":"<p>Use the <code>UserAvatar</code> widget to display a user's photo. This widget gets user profile photo url from the Realtime Database.</p> <ul> <li>No Photo URL: If no photo URL is provided, it shows a user icon.</li> <li>Background Color: The background color is <code>FlutterFlowTheme.of(context).alternate</code>.</li> <li>Foreground Color: The foreground color is <code>FlutterFlowTheme.of(context).primaryText</code>.</li> </ul> No photo url With with photo url"},{"location":"user/#displayname","title":"DisplayName","text":"<p>Use the <code>DisplayName</code> widget to display the display name of a user. This widget displays user's display name from the Realtime Database.</p>"},{"location":"user/#user-list-view","title":"User List View","text":"<p>To list users from the Realtime Database, use the <code>UserListView</code> widget.</p>"},{"location":"user/#alternative-option","title":"Alternative Option","text":"<p>You can also use the built-in FlutterFlow Backend Query to list users from Firestore. This is a fine option if you are not concerned about the cost.</p>"},{"location":"user/#customizing-the-ui","title":"Customizing the UI","text":"<p>You have several options to customize the UI design:</p> <ul> <li>Default UI: Use the built-in default UI.</li> <li>Default Component: Use the default component provided.</li> <li>Custom Component: Design your own component.</li> </ul>"},{"location":"user/#horizontal-scrolling","title":"Horizontal Scrolling","text":"<p>You can make the <code>UserListView</code> display and scroll horizontally.</p>"},{"location":"user/#examples","title":"Examples","text":"<p>For examples, visit the Super Library Example.</p>"},{"location":"user/#how-to-customize-ui-design-in-userlistview","title":"How to Customize UI Design in UserListView","text":""},{"location":"user/#step-1-create-userlisticon-component","title":"Step 1: Create UserListIcon Component","text":"<ul> <li>Parameters:<ul> <li><code>uid</code> (String, required)</li> <li><code>displayName</code> (String, required)</li> <li><code>photoUrl</code> (ImagePath, optional)</li> </ul> </li> </ul>"},{"location":"user/#step-2-design-userlisticon-component","title":"Step 2: Design UserListIcon Component","text":"<ul> <li>Customize the design of the <code>UserListIcon</code> component as needed.</li> </ul>"},{"location":"user/#step-3-create-publicprofilescreen","title":"Step 3: Create PublicProfileScreen","text":"<ul> <li>Screen Name: You can name this screen as you like.</li> </ul>"},{"location":"user/#step-4-add-ontap-action-to-userlisticon","title":"Step 4: Add onTap Action to UserListIcon","text":"<ul> <li>Action: Open the <code>PublicProfileScreen</code> when <code>UserListIcon</code> is tapped.</li> <li>Customization: You can add any action and customize the UI/UX as desired.</li> </ul>"},{"location":"user/#step-5-design-publicprofilescreen","title":"Step 5: Design PublicProfileScreen","text":"<ul> <li>Customize the design of the <code>PublicProfileScreen</code> as needed.</li> </ul>"},{"location":"user/#different-ui-design-on-each-screen","title":"Different UI Design on Each Screen","text":"<p>You can design a different UI on each screen by following these steps:</p> <ol> <li>Design the Component:<ol> <li>Create components to display user in each screen.</li> </ol> </li> <li>Call a Custom Action:<ol> <li>Use a custom action to set the <code>userListTile</code> component.</li> <li>Example: <code>Component.userListTile = (user) =&gt; ...</code></li> </ol> </li> </ol>"},{"location":"user/#user-search","title":"User Search","text":"<p>The Super Library does not provide UI or code for user search due to FlutterFlow's limitations. Follow these steps to create your own user search:</p>"},{"location":"user/#setting-up-user-search","title":"Setting Up User Search","text":"<ol> <li>Add <code>display_name_lowercase</code> Field:<ol> <li>This field will be automatically saved in the Firestore user document.</li> <li>Add a field named <code>display_name_lowercase</code> in the user schema.</li> <li>This field will store the lowercase version of the user's <code>display_name</code>.</li> </ol> </li> <li>Search Implementation:<ol> <li>Compare user input in lowercase to the value of <code>display_name_lowercase</code>.</li> <li>Use the <code>.toLowerCase()</code> method for comparison.</li> </ol> </li> </ol>"},{"location":"user/#search-options","title":"Search Options","text":"<p>You can filter/search the user's <code>display_name_lowercase</code>:</p> <ul> <li>Equality Match: Exact match.</li> <li>Partial Match: Match the beginning part of the name.</li> </ul>"},{"location":"user/#note","title":"Note","text":"<p>This is the nature of how FlutterFlow works, so the Super Library does not provide any UI for this feature. For an example, please see the Super Library sample project.</p> <p>You can also write custom code to search for users in the Realtime Database.</p>"},{"location":"user/#search-users-by-display_name-case-insensitive","title":"Search Users by <code>display_name</code> (Case-Insensitive)","text":""},{"location":"user/#example-users","title":"Example Users","text":"<p>Let\u2019s there are users whose display_name are;</p> <ul> <li>Young One</li> <li>younG Two</li> <li>You and Me</li> </ul>"},{"location":"user/#search-criteria","title":"Search Criteria","text":"<p>To search for users whose <code>display_name</code> begins with \"you\" (case-insensitive), you can query Firestore on <code>display_name_lowercase</code> field and display the results in a <code>ListView</code>.</p>"},{"location":"user/#important-note","title":"Important Note","text":"<p>Allowing users to search for other users with a single letter, like <code>a</code>, can result in a large number of users being listed. This can lead to spam messages being sent to users whom they don't know. To prevent this, it is recommended to limit the search to words that are longer than 3 or 4 characters. This helps ensure that search results are more specific and reduces the likelihood of spam.</p>"},{"location":"user/#functions","title":"Functions","text":""},{"location":"user/#isanonymous","title":"isAnonymous","text":"<p>See the custom actions page</p>"},{"location":"user/#blocking-user","title":"Blocking User","text":""},{"location":"user/#database-structure-for-blocking","title":"Database structure for Blocking","text":"<ul> <li>We use Firestore to manage blocked users by storing user UIDs in the <code>blockedUsers</code> field within the user document.<ul> <li>This approach is beneficial because:<ul> <li>It allows easy determination of whether a user is blocked from the user's own document.</li> <li>The <code>blockedUsers</code> field is part of the user's document, so it is automatically loaded and updated in memory, eliminating the need for repeated document reads.</li> </ul> </li> </ul> </li> <li>To use the user blocking feature in FlutterFlow, create a String array field named <code>blockedUsers</code> in the Users schema in Firestore.</li> <li>Use the <code>blockUser</code> and <code>unblockUser</code> custom actions to manage blocked users:<ul> <li><code>blockUser</code> adds the other user's UID to <code>blockedUsers</code> and mirrors the block list in the Realtime Database.</li> <li><code>unblockUser</code> removes the other user's UID from <code>blockedUsers</code> and mirrors the block list in the Realtime Database.</li> </ul> </li> <li>The uid of other user will be saved in the login user's Firestore document like <code>/users/&lt;uid&gt; { blockedUsers: [ ... ] }</code>.<ul> <li>When the user A blocks the B, B's uid is saved in <code>/users/A/{ blockedUsers: [ B ] }</code>.</li> <li>It's the string of uid. Not the reference of the user document.</li> </ul> </li> </ul>"},{"location":"user/#blocking-a-user","title":"blocking a user","text":"<ul> <li>To block a user, you can call <code>blockUser</code> custom action to block a user.</li> <li>When user-A blocks user-B,<ul> <li>The <code>blockUser</code> custom action will add B's uid into <code>blockedUsers</code> array field in A's fireestore user document.<ul> <li>And, mirror the the B's uid at <code>/blocked-users/A/{ B }</code> in the Reatime Database.</li> <li>And, if the user A has a single chat room with user-B, it will leave the chat room.</li> </ul> </li> </ul> </li> </ul>"},{"location":"user/#un-blocking-a-user","title":"Un-blocking a User","text":"<ul> <li>The <code>unblockUser</code> custom action does the unblocking a user.<ul> <li>And it mirror the other user's uid from the Realtime Database.</li> </ul> </li> <li>To know if a user is blocked or not, simply do the way how the FlutterFlow goes<ul> <li>The <code>blockedUsers</code> is in the login user's document. Meaning, it will be automatically synced with the <code>Authenticated User</code> variable in FlutterFlow.</li> <li>To display if the user is blocked or not, check if the user's uid is in the <code>blockedUsers</code> of <code>Authenticated User</code>.<ul> <li>And if the uid exists, then the user is blocked by the login user and the login user can unblock the user.</li> </ul> </li> </ul> </li> </ul>"},{"location":"user/#listing-the-blocked-users","title":"Listing the blocked users","text":"<ul> <li>To list all the users that the login user has blocked, simply list the blocked-users whose uid is in <code>blockedUsers</code> in the user's Firestore document.</li> <li>And remove the user from blocked-list, call <code>unblockUser</code> custom action.</li> <li>You may want to see the flutter code to list blocked users.</li> </ul>"},{"location":"user/#usage","title":"Usage","text":"<ul> <li>To know if a user is blocked by the login user in FlutterFlow, dig in <code>blockedUsers</code> field in the FlutterFlow authenticated user variable.</li> <li>To know if a user is blocked by the login user in source coding, dig in <code>blockedUsers</code> field in <code>UserService.instance.firestoreUserData</code>.</li> <li>You may use <code>BlockedUser</code> widget for easy use in the widget tree.</li> </ul>"},{"location":"user/#displaying-the-block-and-unblock-buttons","title":"Displaying the block and unblock buttons","text":"<p>Exmaple: How to show block or unblock buttons based on the user's <code>blockedUsers</code> field.</p> <p></p>"},{"location":"user/#to-display-the-list-of-users-that-are-blocked-by-login-user","title":"To display the list of users that are blocked by login user","text":"<p>Simply display the list of users whose uid is in <code>blockedUsers</code> field. You may add a unblock button beside the user's profile photo.</p>"},{"location":"user/#verification","title":"Verification","text":"<ul> <li>Super library users a special field named <code>verified</code> from user document to check if the user has verified or not.</li> <li>This <code>verified</code> field is for noting that if the user has verified. If the user has verified himself, save <code>true</code> value to this field. Otherwise it can be false or not existing.</li> <li> <p>But how the app should verify a user's identity?</p> <ul> <li>It's up to you how you build the logic. You may do so by doing some combination of phone sign-in, and social login, and uploading the ID card.</li> <li>As long as the user follows the verification login, save <code>true</code> to <code>verified</code> field.</li> </ul> </li> <li> <p>For testing purpose, you may set the <code>verfied</code> feild to <code>true</code> to a user. So that the user does not have to verify.</p> </li> </ul>"},{"location":"user/#widgets","title":"Widgets","text":""},{"location":"user/#blockeduser","title":"BlockedUser","text":"<p>This widget listens the login user's document in Firestore and build the UI based on the status of the block.</p> <p>This widget is usefuly on custom coding. You may not use it in the FlutterFlow canvas directly.</p>"},{"location":"user/#security","title":"Security","text":"<ul> <li>We recommend locking the document to prevent unauthorized access. Instead, use the <code>UserAvatar</code> and <code>DisplayName</code> widgets to display user information.<ul> <li>This is because the user document in Firestore may contain private information such as phone numbers or email addresses.</li> <li>And the <code>UserAvatar</code> and <code>DisplayName</code> access data from the Realtime Database where there should be no private information.</li> </ul> </li> </ul>"},{"location":"common_library/","title":"Common Library","text":"<p>Common library provides most common functions, custom actions, or custom widgets.</p> <p>It does not provides anything of the Disabled Features in a Library of FlutterFlow.</p>"},{"location":"common_library/#sample-site","title":"Sample site","text":"<p>Run build at - Oct 17, 2024</p>"},{"location":"common_library/components/country_picker/","title":"Country Picker","text":""},{"location":"common_library/components/country_picker/#country-picker-component","title":"Country Picker Component","text":"<p>The Country Picker component allows you to easily get country dial codes and other information. It is primarily designed for selecting country dial codes during phone sign-in but can also be used for other purposes, such as:</p> <ul> <li>Getting the country flag</li> <li>Getting the country name</li> <li>Getting the two-letter country code</li> </ul>"},{"location":"common_library/components/country_picker/#conditionally-show-widgets","title":"Conditionally show widgets","text":"<ul> <li>If you want to display a wdiget (UI) only if the dialog is selected,<ul> <li>You can conditionally show the widget when the <code>selectedCountry</code> of the Component State in the <code>CountryDialCodePicker</code> component.</li> </ul> </li> </ul>"},{"location":"common_library/components/country_picker/#screenshots","title":"Screenshots","text":""},{"location":"common_library/components/country_picker/#country-selector","title":"Country Selector","text":""},{"location":"common_library/components/country_picker/#mawhen-a-country-is-selected","title":"maWhen a Country is Selected","text":""},{"location":"common_library/components/country_picker/#country-search-bottom-sheet","title":"Country Search Bottom Sheet","text":""},{"location":"common_library/custom_actions/package_info/","title":"Package Info","text":"<p>This custom action provides an API for querying information about an application package. It works on iOS, Android, and Web.</p>"},{"location":"common_library/custom_actions/package_info/#usage","title":"Usage","text":"<p>You can use the <code>packageInfo</code> action to query information about the application package.</p>"},{"location":"common_library/custom_actions/package_info/#response","title":"Response","text":"<p>The <code>packageInfo</code> custom action will return the following information in JSON format:</p> <pre><code>{\n  \"appName\": \"app name\",\n  \"packageName\": \"package name\",\n  \"version\": \"version\",\n  \"buildNumber\": \"build number\"\n}\n</code></pre>"},{"location":"common_library/custom_actions/package_info/#example","title":"Example","text":""},{"location":"common_library/custom_actions/package_info/#flutter-code","title":"Flutter Code","text":"<p>To display package info with Flutter, you can use the following code:</p> <pre><code>FutureBuilder(\n    future: packageInfo(),\n    builder: (context, snapshot) {\n      if (snapshot.connectionState == ConnectionState.done) {\n        return Column(\n          children: [\n            Text('Package Info: ${snapshot.data}'),\n            const SizedBox(height: 20),\n            if (snapshot.data['version'] != null)\n              Text('Version: ${snapshot.data['version']}'),\n            if (snapshot.data['buildNumber'] != null)\n              Text(\n                  'Build Number: ${snapshot.data['buildNumber']}'),\n          ],\n        );\n      }\n      return const CircularProgressIndicator();\n    }),\n</code></pre>"},{"location":"common_library/custom_actions/show_app_update_dialog/","title":"showAppUpdateDialog","text":"<p>The <code>showAppUpdateDialog</code> custom action displays a dialog prompting the user to update the app.</p>"},{"location":"common_library/custom_actions/show_app_update_dialog/#parameters","title":"Parameters","text":"<ul> <li><code>title</code>: the title of the dialog</li> <li><code>message</code>: the message of the dialog </li> <li><code>logoUrl</code>: URL to display a logo at the top of the dialog.</li> <li><code>alertAgainInterval</code>: Interval in minutes to alert the user again. The default value is 1000 (16.6 hours). For testing, you can set it to 0 to always show the dialog.</li> </ul>"},{"location":"common_library/custom_actions/show_app_update_dialog/#flutter-code-example","title":"Flutter Code Example","text":"<p>```dart SchedulerBinding.instance.addPostFrameCallback((_) async {   await common_library_1i4ez9_actions.showAppUpdateDialog(     context,     'NEW AI COOL',     'Un-install and install again AI COOL',     'https://picsum.photos/250?image=9',     false,     false,     0,     () async {},     () async {},     () async {},   ); });</p>"},{"location":"common_library/custom_functions/formatInternationalPhoneNumber/","title":"formatInternationalPhoneNumber function","text":"<p>The function accepts <code>dialCode</code> and <code>mobileNumber</code> and returns the phone number in the international format. If it cannot format the phone number, it returns an empty string. If the phone number is an empty string, the FlutterFlow will display an error message of <code>Phone Number Validation Message</code>. You can customize this message to something like <code>Please input a valid phone number</code> in the language settings.</p> <p>Note: The returned value may not be an exact international phone number format, but it is sufficient for use in FirebaseAuth phone sign-in.</p> <p>Note: It's a good idea to allow users to input only numbers. Set the input keyboard type to \"number\" or \"phone number\" for better user experience.</p> <pre><code>String formatInternationalPhoneNumber(String dialCode, String mobileNumber);\n</code></pre> <p>Below are the test code of <code>formatInternationalPhoneNumber</code>.</p> <pre><code>void runTests() {\n  // Test cases\n  List&lt;Map&lt;String, dynamic&gt;&gt; testCases = [\n    {\n      'dialCode': '+82',\n      'mobileNumber': '010-1234-5678',\n      'expected': '+821012345678'\n    }, // Valid case\n    {\n      'dialCode': '1',\n      'mobileNumber': '1234567890',\n      'expected': '+11234567890'\n    }, // Valid case (US number)\n    {\n      'dialCode': '+44',\n      'mobileNumber': '(020) 1234-5678',\n      'expected': '+442012345678'\n    }, // Valid case (UK number with formatting characters)\n    {\n      'dialCode': '82',\n      'mobileNumber': '010 1234 5678',\n      'expected': '+821012345678'\n    }, // Valid case (without +)\n    {\n      'dialCode': '+49',\n      'mobileNumber': '01520-1234567',\n      'expected': '+4915201234567'\n    }, // Valid case (German number)\n    {\n      'dialCode': '+1',\n      'mobileNumber': 'abc-1234-5678',\n      'expected': ''\n    }, // Invalid mobile number (contains letters)\n    {\n      'dialCode': '+abc',\n      'mobileNumber': '01012345678',\n      'expected': ''\n    }, // Invalid dial code (contains letters)\n    {\n      'dialCode': '123+',\n      'mobileNumber': '01012345678',\n      'expected': ''\n    }, // Invalid dial code (plus sign in wrong position)\n    {\n      'dialCode': '82',\n      'mobileNumber': '01012345678#',\n      'expected': ''\n    }, // Invalid mobile number (contains symbols)\n    {\n      'dialCode': '+61',\n      'mobileNumber': '0412345678',\n      'expected': '+61412345678'\n    }, // Valid case (Australia number)\n    {\n      'dialCode': '+82',\n      'mobileNumber': '010123',\n      'expected': ''\n    }, // Invalid mobile number (too short)\n    {\n      'dialCode': '+82',\n      'mobileNumber': '0101234567890123',\n      'expected': ''\n    }, // Invalid mobile number (too long)\n    {\n      'dialCode': '+1',\n      'mobileNumber': ' 1111 1111- 1 1 ',\n      'expected': '+11111111111'\n    },\n    {\n      'dialCode': '+1',\n      'mobileNumber': '0 1111 1111- 1 1 ',\n      'expected': '+11111111111'\n    },\n    {\n      'dialCode': '+63',\n      'mobileNumber': '0 917 1234-5-6 7 8 ',\n      'expected': '+6391712345678'\n    },\n  ];\n\n  int passed = 0;\n  int failed = 0;\n  List&lt;String&gt; failedTests = [];\n\n  // Run each test case\n  for (var testCase in testCases) {\n    String result = formatInternationalPhoneNumber(\n        testCase['dialCode'], testCase['mobileNumber']);\n    if (result == testCase['expected']) {\n      passed++;\n    } else {\n      failed++;\n      failedTests.add(\n          'Test failed for Dial code: ${testCase['dialCode']}, Mobile: ${testCase['mobileNumber']} -&gt; The result is empty string, Result: $result');\n    }\n  }\n\n  // Print test results\n  print('Total tests: ${testCases.length}');\n  print('Passed: $passed');\n  print('Failed: $failed');\n\n  // Print detailed info for failed tests\n  if (failed &gt; 0) {\n    print('\\nFailed test cases:');\n    for (var failedTest in failedTests) {\n      print(failedTest);\n    }\n  }\n}\n\nvoid main() {\n  runTests();\n}\n</code></pre>"},{"location":"common_library/custom_widgets/comm_circular_progress_indicator/","title":"CommonCircularProgressIndicator","text":"<p>FlutterFlow currently does not offer a built-in widget for displaying a <code>CircularProgressIndicator</code>. </p> <p>You can use the <code>CommonCircularProgressIndicator</code> widget to display a circular progress indicator in your application.</p>"},{"location":"common_library/custom_widgets/comm_circular_progress_indicator/#commoncircularprogressindicator_1","title":"CommonCircularProgressIndicator","text":""},{"location":"common_library/custom_widgets/comm_circular_progress_indicator/#commoncircularprogressindicator-with-adaptive","title":"CommonCircularProgressIndicator with adaptive","text":""}]}